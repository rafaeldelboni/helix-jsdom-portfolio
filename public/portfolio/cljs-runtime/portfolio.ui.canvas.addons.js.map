{"version":3,"sources":["portfolio/ui/canvas/addons.cljs"],"mappings":"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","names":["portfolio.ui.canvas.addons/get-tool-id","tool","or__5045__auto__","portfolio.ui.canvas.addons/get-persisted-value","e44717","G__44718","js/localStorage","cljs.core/not-empty","cljs.reader.read_string","_e","portfolio.ui.canvas.addons/get-default-value","portfolio.ui.canvas.addons/get-global-value","state","cljs.core.get_in","portfolio.ui.canvas.addons/get-pane-value","pane-id","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","portfolio.ui.canvas.addons/get-tool-value","p__44722","vec__44723","cljs.core.nth","seq44719","G__44720","cljs.core/first","cljs.core/next","G__44721","self__5754__auto__","cljs.core.merge","p__44726","map__44727","cljs.core/--destructure-map","cljs.core.get","portfolio.ui.canvas.addons/get-current-value","pane-options","temp__5804__auto__","ks","cljs.core.map","cljs.core.filter","cljs.core/map?","cljs.core.mapcat","cljs.core/keys","cljs.core/seq","cljs.core/select-keys","portfolio.ui.canvas.addons.get_tool_value","portfolio.ui.canvas.addons/get-set-actions","v","id","global?","portfolio.ui.layout/split-screen?","G__44728","cljs.core.conj","and__5043__auto__","portfolio.ui.canvas.addons/get-override-actions","cljs.core.concat","iter__5523__auto__","s__44730","cljs.core/LazySeq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__44732","cljs.core/chunk-buffer","i__44731","vec__44735","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__44729","cljs.core/chunk-rest","vec__44741","cljs.core/cons","cljs.core/rest","p__44746","vec__44747","_","m","cljs.core/contains?","portfolio.ui.canvas.addons/get-clear-actions","G__44750","portfolio.ui.canvas.addons/get-expand-path","vid","p__44764","vec__44765","portfolio.ui.canvas.addons/get-custom-tool-source-title","source","G__44768","cljs.core/Keyword","js/Error","portfolio.ui.canvas.addons/prepare-tool-menu","pane","current-value","custom-options","cljs.core/set","s__44770","b__44772","i__44771","map__44773","iter__44769","map__44774","title","value","disabled?","selected?","cljs.core._EQ_","cljs.core/ifn?","cljs.core.remove","cljs.core/nil?","portfolio.ui.canvas.addons/get-tool-title","f","G__44775","portfolio.ui.canvas.addons/prepare-toolbar-menu-button","expand-path","expanded?","portfolio.ui.components.canvas-toolbar-buttons/MenuButton","cljs.core/with-meta","portfolio.ui.canvas.addons/create-toolbar-menu-button","data","missing","cljs.core.comp","G__44776","cljs.core.dissoc","cljs.core.assoc","portfolio.ui.canvas.addons/create-canvas-extension","portfolio.ui.canvas.addons/create-action-button","seq__44777","chunk__44778","count__44779","i__44780","c__5568__auto__","cljs.core/chunk-first","k","cljs.core.ex_info","show?","cljs.core/constantly","options","fexpr__44781"],"sourcesContent":["(ns portfolio.ui.canvas.addons\n  (:require [cljs.reader :as r]\n            [portfolio.ui.canvas.protocols :as canvas]\n            [portfolio.ui.components.canvas-toolbar-buttons :refer [MenuButton]]\n            [portfolio.ui.layout :as layout]))\n\n(defn get-tool-id [tool]\n  (or (:group-id tool) (:id tool)))\n\n(defn get-persisted-value [tool]\n  (try\n    (some->> (str (get-tool-id tool))\n             (.getItem js/localStorage)\n             not-empty\n             r/read-string)\n    (catch :default _e\n      nil)))\n\n(defn get-default-value [tool]\n  (or (when (:persist? tool)\n        (get-persisted-value tool))\n      (:default-value tool)))\n\n(defn get-global-value [state tool]\n  (get-in state [:tools (get-tool-id tool) :value]))\n\n(defn get-pane-value [state tool pane-id]\n  (get-in state [:panes pane-id (get-tool-id tool) :value]))\n\n(defn get-tool-value [state tool & [pane-id]]\n  (merge (get-global-value state tool)\n         (when pane-id\n           (get-pane-value state tool pane-id))))\n\n(defn get-current-value [state tool {:keys [pane-id pane-options]}]\n  (or (when-let [ks (->> (:options tool)\n                         (map :value)\n                         (filter map?)\n                         (mapcat keys)\n                         seq)]\n        (not-empty (select-keys pane-options ks)))\n      (get-tool-value state tool pane-id)\n      (get-default-value tool)))\n\n(defn get-set-actions [state tool pane-id v]\n  (let [id (get-tool-id tool)\n        global? (or (:global? tool) (not (layout/split-screen? state)))]\n    (cond-> [[:assoc-in [:panes pane-id id :value] v]]\n      global? (conj [:assoc-in [:tools id :value] v])\n      (and global? (:persist? tool)) (conj [:save-in-local-storage id v]))))\n\n(defn get-override-actions [state tool v]\n  (let [id (get-tool-id tool)]\n    (concat\n     (for [[pane-id] (filter (fn [[_ m]] (contains? m id)) (:panes state))]\n       [:dissoc-in [:panes pane-id id :value]])\n     [[:assoc-in [:tools id :value] v]]\n     (when (:persist? tool)\n       [[:save-in-local-storage id v]]))))\n\n(defn get-clear-actions [state tool pane-id]\n  (let [id (get-tool-id tool)\n        global? (not (layout/split-screen? state))]\n    (cond-> [[:dissoc-in [:panes pane-id id :value]]]\n      global? (conj [:dissoc-in [:tools id :value]])\n      (and global? (:persist? tool)) (conj [:save-in-local-storage id nil]))))\n\n(defn get-expand-path [vid]\n  [:canvas/tools vid :expanded])\n\n(defn get-custom-tool-source-title [[source]]\n  (case source\n    :scene \"Scene config\"\n    :collection \"Collection config\"\n    :state-layout \"Global config\"\n    :view \"Canvas config\"\n    :portfolio.ui.layout/gallery-default \"Default config (gallery)\"\n    :portfolio.ui.layout/default \"Default config\"))\n\n(defn prepare-tool-menu [tool state pane]\n  (let [current-value (get-current-value state tool pane)\n        custom-options (when (and current-value\n                                  (not (contains? (set (map :value (:options tool))) current-value)))\n                         [{:title (get-custom-tool-source-title (:config-source pane))\n                           :value current-value\n                           :disabled? true}])]\n    {:options\n     (for [{:keys [title value disabled?]} (concat (:options tool) custom-options)]\n       (let [selected? (= value current-value)]\n         {:title title\n          :selected? selected?\n          :actions (when-not disabled?\n                     (->> [[:dissoc-in (get-expand-path (:pane-id pane))]]\n                          (concat\n                           (if selected?\n                             (get-clear-actions state tool (:pane-id pane))\n                             (get-set-actions state tool (:pane-id pane) value)))\n                          (concat\n                           [(when (ifn? (:on-select tool))\n                              [:fn/call (:on-select tool) value])])\n                          (remove nil?)))}))}))\n\n(defn get-tool-title [state tool pane]\n  (or (when (ifn? (:prepare-title tool))\n        (let [f (:prepare-title tool)]\n          (f (get-current-value state tool pane))))\n      (:title tool)))\n\n(defn prepare-toolbar-menu-button [tool state pane]\n  (let [expand-path (get-expand-path (:pane-id pane))\n        expanded? (= (:id tool) (get-in state expand-path))]\n    (with-meta\n      {:text (when-not (:icon tool)\n               (get-tool-title state tool pane))\n       :icon (:icon tool)\n       :title (when (:icon tool)\n                (get-tool-title state tool pane))\n       :actions (if expanded?\n                  [[:dissoc-in expand-path]]\n                  [[:assoc-in expand-path (:id tool)]])\n       :menu (when expanded?\n               (prepare-tool-menu tool state pane))}\n      {`canvas/render-toolbar-button #'MenuButton})))\n\n(defn create-toolbar-menu-button [data]\n  (let [missing (filter (comp nil? data) #{:id :title :options :prepare-canvas})]\n    (with-meta\n      (cond-> (dissoc data :prepare-canvas)\n        (seq missing)\n        (assoc :problems [{:problem :missing-keys\n                           :data (set missing)\n                           :message \"Can't create toolbar menu button without keys\"}]))\n      {`canvas/prepare-toolbar-button #'prepare-toolbar-menu-button\n       `canvas/get-tool-value (fn [tool state pane-id] (get-tool-value state tool pane-id))\n       `canvas/prepare-canvas (or (:prepare-canvas data) (fn [_ _ _]))\n       `canvas/finalize-canvas (or (:finalize-canvas data) (fn [_ _ _]))})))\n\n(defn create-canvas-extension [data]\n  (assert (:id data) \"Can't create viewport extension without :id\")\n  (assert (or (:prepare-canvas data)\n              (:finalize-canvas data)) \"Can't create viewport extension without neither :prepare-canvas nor :finalize-canvas\")\n  (with-meta\n    data\n    {`canvas/prepare-canvas (or (:prepare-canvas data) (fn [_ _ _]))\n     `canvas/finalize-canvas (or (:finalize-canvas data) (fn [_ _ _]))}))\n\n(defn create-action-button [data]\n  (doseq [k #{:title :get-actions :prepare-canvas}]\n    (when-not (k data)\n      (throw (ex-info \"Can't create toolbar action button without key\"\n                      {:k k :data data}))))\n  (let [show? (or (:show? data) (constantly true))]\n    (with-meta\n      (dissoc data :show? :get-actions :prepare-canvas)\n      {`canvas/prepare-toolbar-button\n       (fn [tool state options]\n         (when (show? tool state options)\n           (with-meta\n             {:text (when-not (:icon data) (:title data))\n              :title (:title data)\n              :icon (:icon data)\n              :actions ((:get-actions data) tool state options)}\n             {`canvas/render-toolbar-button #'MenuButton})))})))\n"],"x_google_ignoreList":[0]}