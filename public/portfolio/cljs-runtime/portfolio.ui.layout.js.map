{"version":3,"sources":["portfolio/ui/layout.cljs"],"mappings":"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","names":["portfolio.ui.layout/gallery?","selection","cljs.core.not_EQ_","portfolio.ui.layout/assign-pane-ids","layout","p1__44309#","cljs.core.update","cljs.core.mapv","cljs.core.assoc","cljs.core/random-uuid","portfolio.ui.layout/init-layout","state","path","or__5045__auto__","cljs.core.get_in","portfolio.ui.layout/get-current-layout-path","portfolio.ui.layout/get-layout-path","portfolio.ui.layout/get-view-layout","cljs.core.merge","cljs.core/assoc-in","temp__5804__auto__","scene","cljs.core/first","cljs.core.filter","collection","cljs.core/reverse","view","portfolio.ui.layout/get-layout","portfolio.ui.layout/get-current-layout","portfolio.ui.layout/get-panes","G__44311","fexpr__44310","cljs.core.mapcat","p__44312","map__44313","cljs.core/--destructure-map","cljs.core.get","portfolio.ui.layout/get-layout-panes","portfolio.ui.layout/split-screen?","cljs.core/count"],"sourcesContent":["(ns portfolio.ui.layout)\n\n(defn gallery? [selection]\n  (not= :scene (:kind selection)))\n\n(defn assign-pane-ids [layout]\n  (if (:kind layout)\n    (update layout :xs #(mapv assign-pane-ids %))\n    (assoc layout ::pane-id (str (random-uuid)))))\n\n(defn init-layout [state layout path]\n  (or (get-in state [:layout path])\n      {:layout (assign-pane-ids layout)\n       :source path}))\n\n(defn get-current-layout-path []\n  [:layout :current])\n\n(defn get-layout-path [layout]\n  [:layout (:source layout)])\n\n(defn get-view-layout [state selection]\n  (if (gallery? selection)\n    (-> (init-layout\n         state\n         (merge {:viewport/height :auto} (:canvas/gallery-defaults state))\n         [::gallery-default])\n        (assoc-in [:layout :gallery?] true))\n    (or (when-let [scene (first (filter :canvas/layout (:scenes selection)))]\n          (init-layout state (:canvas/layout scene) [:scene (:id scene)]))\n        (when-let [collection (->> (reverse (:path selection))\n                                   (filter :canvas/layout)\n                                   first)]\n          (init-layout state (:canvas/layout collection) [:collection (:id collection)]))\n        (when-let [layout (:canvas/layout state)]\n          (init-layout state layout [:state-layout]))\n        (when-let [view (first (filter :canvas/layout (:views state)))]\n          (init-layout state (:canvas/layout view) [:view (:id view)]))\n        (init-layout state {} [::default]))))\n\n(defn get-layout [state path]\n  (get-in state path))\n\n(defn get-current-layout [state]\n  (get-in state (get-in state (get-current-layout-path))))\n\n(defn get-panes [layout]\n  (if (#{:rows :cols} (:kind layout))\n    (mapcat get-panes (:xs layout))\n    [layout]))\n\n(defn get-layout-panes [{:keys [layout]}]\n  (get-panes layout))\n\n(defn split-screen? [state]\n  (< 1 (count (get-layout-panes (get-current-layout state)))))\n"],"x_google_ignoreList":[0]}