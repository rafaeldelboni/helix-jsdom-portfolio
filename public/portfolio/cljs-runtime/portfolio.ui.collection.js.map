{"version":3,"sources":["portfolio/ui/collection.cljs"],"mappings":"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","names":["p1__41934#","portfolio.ui.collection/by-parent-id","parent-id","cljs.core._EQ_","portfolio.ui.collection/ns->path","ns","clojure.string.split","portfolio.ui.collection/path->id","path","cljs.core.keyword","clojure.string.join","portfolio.ui.collection/get-collection-title","s","G__41935","cljs.core/Keyword","cljs.core/name","cljs.core/last","portfolio.homeless/title-case","portfolio.ui.collection/suggest-packages","scenes","p1__41936#","cljs.core.map","or__5045__auto__","G__41938","cljs.core/namespace","id","G__41937","cljs.core/count","cljs.core.assoc","cljs.core.drop_last","portfolio.ui.collection/ensure-defaults","collection","G__41939","cljs.core/empty?","cljs.core/some","cljs.core.comp","portfolio.ui.collection/get-default-organization","collections","existing","cljs.core.into","cljs.core.juxt","cljs.core/identity","packages","iter__5523__auto__","s__41944","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","b__41946","cljs.core/chunk-buffer","i__41945","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__41943","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","pkg","cljs.core.merge","cljs.core.get","folders","cljs.core.keep","cljs.core/set","configured-folders","cljs.core.filter","folder-n","cljs.core.concat","p1__41940#","cljs.core.dissoc","p1__41941#","p1__41942#","p__41947","map__41948","cljs.core/--destructure-map","portfolio.ui.collection/get-collection-path","target","cljs.core/vals","res","cljs.core/List","and__5043__auto__","cljs.core/not","cljs.core.conj","p__41949","map__41950","portfolio.ui.collection/get-collection-scenes","ids","p__41951","map__41952","portfolio.ui.collection/get-selected-scenes","state","portfolio.ui.collection/get-selection","scene","portfolio.ui.collection/by-id","portfolio.ui.collection/get-sort-key","G__41953","clojure.string/lower-case","G__41954","portfolio.ui.collection/get-in-parents","m","k","temp__5802__auto__","cljs.core.get_in","portfolio.ui.collection/get-folder-illustration","expanded?","phosphor.icons/load-icon!","portfolio.ui.collection/get-package-illustration","portfolio.ui.collection/get-scene-illustration","selected?","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","portfolio.ui.collection/get-illustration","p__41958","vec__41959","cljs.core.nth","seq41955","G__41956","cljs.core/next","G__41957","self__5754__auto__","item","current?","G__41962","p__41963","map__41964","portfolio.ui.collection/prepare-selection-menu-bar","selection","expand-path","location","tight?","s__41966","b__41968","i__41967","iter__41965","G__41969","G__41970","cljs.core.not_EQ_","portfolio.ui.routes.get_url","G__41971","cljs.core/chunk-first"],"sourcesContent":["(ns portfolio.ui.collection\n  (:require [clojure.string :as str]\n            [phosphor.icons :as icons]\n            [portfolio.homeless :as h]\n            [portfolio.ui.routes :as routes]))\n\n(defn by-parent-id [parent-id]\n  #(= parent-id (:collection %)))\n\n(defn ns->path [ns]\n  (str/split ns #\"\\.\"))\n\n(defn path->id [path]\n  (keyword (str/join \".\" path)))\n\n(defn get-collection-title [s]\n  (some-> (if (keyword? s)\n            (name s)\n            s)\n          (str/split #\"\\.\")\n          last\n          h/title-case))\n\n(defn suggest-packages [scenes]\n  (->> scenes\n       (map #(or (some-> % :collection name) (namespace (:id %))))\n       (map ns->path)\n       (map (fn [path]\n              (let [id (path->id path)]\n                (cond-> {:id id\n                         :title (get-collection-title (last path))\n                         :kind :package}\n                  (< 1 (count path))\n                  (assoc :collection (path->id (drop-last 1 path)))))))))\n\n(defn ensure-defaults [collection scenes]\n  (cond-> collection\n    (empty? (:title collection))\n    (assoc :title (get-collection-title (:id collection)))\n\n    (nil? (:kind collection))\n    (assoc :kind (if (some (comp #{(:id collection)} :collection) scenes)\n                   :package\n                   :folder))))\n\n(defn get-default-organization [scenes collections]\n  (let [existing (into {} (map (juxt :id identity) collections))\n        packages (for [pkg (suggest-packages scenes)]\n                   (merge pkg (get existing (:id pkg))))\n        folders (->> (keep :collection packages)\n                     set\n                     (map (fn [id]\n                            {:id id\n                             :title (get-collection-title id)\n                             :kind :folder})))\n        configured-folders (->> packages\n                                (keep :collection)\n                                (filter existing))\n        folder-n (count (set (concat (map :id folders) configured-folders)))]\n    (->> (if (or (< 1 folder-n) (seq configured-folders))\n           (concat packages folders)\n           (map #(dissoc % :collection) packages))\n         (map #(merge % (get existing (:id %))))\n         (map #(ensure-defaults % scenes))\n         set)))\n\n(defn get-collection-path [{:keys [scenes collections]} id]\n  (let [target (or (first (filter (comp #{id} :id) (vals scenes)))\n                   (first (filter (comp #{id} :id) (vals collections))))]\n    (loop [res (if target (list target) (list))]\n      (let [parent-id (:collection (first res))]\n        (if (and parent-id (not (some (comp #{parent-id} :id) res)))\n          (recur (->> (vals collections)\n                      (filter (comp #{parent-id} :id))\n                      first\n                      (conj res)))\n          res)))))\n\n(defn get-collection-scenes [{:keys [collections scenes]} ids]\n  (loop [res []\n         ids (set ids)]\n    (if (seq ids)\n      (recur\n       (->> (vals scenes)\n            (filter (comp ids :collection))\n            (concat res))\n       (->> (vals collections)\n            (filter (comp ids :collection))\n            (map :id)\n            set))\n      res)))\n\n(defn get-selected-scenes [{:keys [scenes] :as state} id]\n  (or (seq (filter (comp #{id} :id) (vals scenes)))\n      (get-collection-scenes state [id])))\n\n(defn get-selection [state id]\n  (let [scene (first (filter (comp #{id} :id) (vals (:scenes state))))\n        target (or scene\n                   (->> (vals (:collections state))\n                        (filter (comp #{id} :id))\n                        first))]\n    (when target\n      {:scenes (get-selected-scenes state id)\n       :kind (if scene :scene :collection)\n       :path (get-collection-path state id)\n       :target target})))\n\n(defn by-id [state id]\n  (or (->> (vals (:scenes state))\n           (filter (comp #{id} :id))\n           first)\n      (->> (vals (:collections state))\n           (filter (comp #{id} :id))\n           first)))\n\n(defn get-sort-key [collection]\n  [(:idx collection 999999999)\n   (or (some-> collection :title str/lower-case)\n       (some-> collection :id name))])\n\n(defn get-in-parents\n  \"Look for key `k` in map `m`. If not present, traverse collection hierarchy via\n  `:collection` and look in the parent collection. If the key is not found in\n  any parent, finally try the `state`.\"\n  [state m k]\n  (loop [m m]\n    (or (get m k)\n        (if-let [id (:collection m)]\n          (recur (get-in state [:collections id]))\n          (get state k)))))\n\n(defn get-folder-illustration [state collection expanded?]\n  {:icon (or (if expanded?\n               (:expanded-icon collection)\n               (:collapsed-icon collection))\n             (:icon collection)\n             (if expanded?\n               (get-in-parents state collection :default-folder-expanded-icon)\n               (get-in-parents state collection :default-folder-collapsed-icon))\n             (get-in-parents state collection :default-folder-icon)\n             (if expanded?\n               (icons/icon :phosphor.regular/folder-open)\n               (icons/icon :phosphor.regular/folder)))\n   :color (or (if expanded?\n                (:expanded-icon-color collection)\n                (:collapsed-icon-color collection))\n              (:icon-color collection)\n              \"var(--folder-icon-color)\")})\n\n(defn get-package-illustration [state collection expanded?]\n  {:icon (or (if expanded?\n               (:expanded-icon collection)\n               (:collapsed-icon collection))\n             (:icon collection)\n             (if expanded?\n               (get-in-parents state collection :default-package-expanded-icon)\n               (get-in-parents state collection :default-package-collapsed-icon))\n             (get-in-parents state collection :default-package-icon)\n             (icons/icon :phosphor.regular/cube))\n   :color (or (if expanded?\n                (:expanded-icon-color collection)\n                (:collapsed-icon-color collection))\n              (:icon-color collection)\n              \"var(--highlight-color)\")})\n\n(defn get-scene-illustration [state scene selected?]\n  {:icon (or (when selected?\n               (:selected-icon scene))\n             (:icon scene)\n             (when selected?\n               (get-in-parents state scene :default-scene-selected-icon))\n             (get-in-parents state scene :default-scene-icon)\n             (icons/icon :phosphor.regular/bookmark))\n   :color (or (when selected?\n                (:selected-icon-color scene))\n              (:icon-color scene)\n              (when-not selected?\n                \"var(--browser-unit-icon-color)\"))})\n\n(defn get-illustration [item state & [current?]]\n  (case (:kind item)\n    :folder (get-folder-illustration state item current?)\n    :package (get-package-illustration state item current?)\n    (get-scene-illustration state item current?)))\n\n(defn prepare-selection-menu-bar [state selection {:keys [expand-path location tight?]}]\n  {:title (if tight?\n            [{:text (:title (:target selection))}]\n            (for [item (:path selection)]\n              (cond-> {:text (:title item)}\n                (and (not= (:target selection) item) location)\n                (assoc :url (routes/get-url location item)))))\n\n   :action {:icon (if (get-in state expand-path)\n                    (icons/icon :phosphor.regular/caret-up)\n                    (icons/icon :phosphor.regular/caret-down))\n            :actions [[:assoc-in expand-path (not (get-in state expand-path))]]}\n   :illustration (some-> (:target selection) (get-illustration state))})\n"],"x_google_ignoreList":[0]}