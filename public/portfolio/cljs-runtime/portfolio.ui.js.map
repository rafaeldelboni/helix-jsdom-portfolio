{"version":3,"sources":["portfolio/ui.cljs"],"mappings":"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","names":["js/portfolio","js/portfolio.ui","js/portfolio.ui.app","portfolio.ui/app","cljs.core.atom","portfolio.ui/get-collections","scenes","collections","portfolio.ui.collection/get-default-organization","cljs.core/vals","cljs.core.map","cljs.core.juxt","cljs.core/identity","cljs.core.into","portfolio.ui/portfolio-docs?","user-v","cljs.core/boolean","or__5045__auto__","cljs.core._EQ_","js/location.hostname","cljs.core/re-find","js/location.href","portfolio.ui/create-app","config","canvas-tools","extra-canvas-tools","cljs.core.update","cljs.core/deref","cljs.core.assoc","portfolio.data/scenes","portfolio.data/collections","portfolio.ui.canvas/create-canvas","portfolio.ui.canvas.background/create-background-tool","portfolio.ui.canvas.viewport/create-viewport-tool","portfolio.ui.canvas.grid/create-grid-tool","portfolio.ui.canvas.zoom/create-zoom-tool","portfolio.ui.canvas.split/create-split-tool","portfolio.ui.canvas.docs/create-docs-tool","portfolio.ui.canvas.code/create-code-tool","portfolio.ui.canvas.compare/create-compare-tool","portfolio.ui.canvas.split/create-close-tool","portfolio.ui/eventually-execute","portfolio.homeless/debounce","portfolio.ui.actions/execute-action!","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","portfolio.ui/index-content","p__45471","vec__45472","map__45475","cljs.core.nth","cljs.core/--destructure-map","cljs.core.get","seq45469","G__45470","cljs.core/first","cljs.core/next","self__5754__auto__","app","ids","map__45476","index","log?","js/requestAnimationFrame","_","seq__45477","cljs.core/seq","chunk__45478","count__45479","i__45480","temp__5804__auto__","cljs.core/chunked-seq?","c__5568__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","doc","G__45482","cljs.core.concat","cljs.core.filter","cljs.core.comp","cljs.core/set","cljs.core.println","portfolio.ui.search.protocols/index","portfolio.ui/render-scene","x","scene","portfolio.data/get-tapped-scene","portfolio.data/register-repl-scene!","portfolio.ui.routes/get-scene-location","portfolio.ui.routes/get-current-location","portfolio.ui/start!","p__45484","vec__45485","map__45488","seq45483","self__5755__auto__","on-render","get-indexable-data","opt","->diffable","cljs.core.partial","portfolio.ui.search/get-diffables","portfolio.ui.search/get-indexable-data","cljs.core.swap_BANG_","cljs.core/merge","portfolio.ui.client/started?","cljs.core/add-watch","old-scenes","old-collections","state","portfolio.ui.index_content","portfolio.ui.search/get-diff-keys","cljs.core/assoc","cljs.core/add-tap","js/window.addEventListener","e","action","portfolio.ui.actions/get-action","portfolio.ui.client.start_app"],"sourcesContent":["(ns portfolio.ui\n  (:require [portfolio.data :as data]\n            [portfolio.homeless :as h]\n            [portfolio.ui.actions :as actions]\n            [portfolio.ui.canvas :as canvas]\n            [portfolio.ui.canvas.background :as canvas-bg]\n            [portfolio.ui.canvas.code :as code]\n            [portfolio.ui.canvas.compare :as compare]\n            [portfolio.ui.canvas.docs :as docs]\n            [portfolio.ui.canvas.grid :as canvas-grid]\n            [portfolio.ui.canvas.split :as split]\n            [portfolio.ui.canvas.viewport :as canvas-vp]\n            [portfolio.ui.canvas.zoom :as canvas-zoom]\n            [portfolio.ui.client :as client]\n            [portfolio.ui.collection :as collection]\n            [portfolio.ui.routes :as routes]\n            [portfolio.ui.search :as search]\n            [portfolio.ui.search.protocols :as index]))\n\n(defonce app (atom nil))\n\n(defn get-collections [scenes collections]\n  (->> (collection/get-default-organization (vals scenes) (vals collections))\n       (map (juxt :id identity))\n       (into {})))\n\n(defn portfolio-docs? [user-v]\n  (if (nil? user-v)\n    (boolean (or (= \"localhost\" js/location.hostname)\n                 (re-find #\"\\d+\\.\\d+\\.\\d+\\.\\d+\" js/location.href)))\n    user-v))\n\n(defn create-app [config canvas-tools extra-canvas-tools]\n  (-> config\n      (update :portfolio-docs? portfolio-docs?)\n      (assoc :scenes @data/scenes)\n      (assoc :collections (get-collections @data/scenes @data/collections))\n      (assoc :views [(canvas/create-canvas\n                      {:canvas/layout (:canvas/layout config)\n                       :tools (into (or canvas-tools\n                                        [(canvas-bg/create-background-tool config)\n                                         (canvas-vp/create-viewport-tool config)\n                                         (canvas-grid/create-grid-tool config)\n                                         (canvas-zoom/create-zoom-tool config)\n                                         (split/create-split-tool config)\n                                         (docs/create-docs-tool config)\n                                         (code/create-code-tool config)\n                                         (compare/create-compare-tool config)\n                                         (split/create-close-tool config)])\n                                    extra-canvas-tools)})])))\n\n(def eventually-execute (h/debounce actions/execute-action! 250))\n\n(defn index-content [app & [{:keys [ids]}]]\n  (let [{:keys [index scenes collections log?]} @app]\n    (when index\n      (js/requestAnimationFrame\n       (fn [_]\n         (doseq [doc (cond->> (concat (vals scenes) (vals collections))\n                       ids (filter (comp (set ids) :id)))]\n           (when log?\n             (println \"Index\" (:id doc)))\n           (index/index index doc)))))))\n\n(defn render-scene [x]\n  (when-let [scene (data/get-tapped-scene x)]\n    (data/register-repl-scene! scene)\n    (actions/execute-action! app [:go-to-location (routes/get-scene-location (routes/get-current-location) scene)])))\n\n(defn start! [& [{:keys [on-render config canvas-tools extra-canvas-tools index get-indexable-data] :as opt}]]\n  (let [->diffable (partial search/get-diffables (or get-indexable-data search/get-indexable-data))]\n    (swap! app merge (create-app config canvas-tools extra-canvas-tools) {:index index})\n\n    (when-not (client/started? app)\n      (add-watch data/scenes ::app\n        (fn [_ _ old-scenes scenes]\n          (let [collections (get-collections scenes (:collections @app))\n                old-collections (get-collections old-scenes (:collections @app))]\n            (swap! app (fn [state]\n                         (-> state\n                             (assoc :scenes scenes)\n                             (assoc :collections collections))))\n            (when (:reindex? opt true)\n              (index-content\n               app\n               {:ids (concat\n                      (search/get-diff-keys (->diffable scenes) (->diffable old-scenes))\n                      (search/get-diff-keys (->diffable collections) (->diffable old-collections)))})))\n          (eventually-execute app [:go-to-current-location])))\n\n      (add-watch data/collections ::app\n        (fn [_ _ _ collections]\n          (let [old-collections (:collections @app)\n                collections (get-collections (:scenes @app) collections)]\n            (swap! app assoc :collections collections)\n            (when (:reindex? opt true)\n              (index-content app {:ids (search/get-diff-keys (->diffable collections) (->diffable old-collections))})))))\n\n      (add-tap render-scene)\n\n      (js/window.addEventListener\n       \"message\"\n       (fn [e]\n         (when (.. e -data -action)\n           (when-let [action (actions/get-action (.-data e))]\n             (actions/execute-action! app action)))))))\n\n  (when-not (client/started? app)\n    (index-content app))\n\n  (client/start-app app {:on-render on-render}))\n"],"x_google_ignoreList":[0]}