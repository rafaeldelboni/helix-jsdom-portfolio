{"version":3,"sources":["portfolio/ui/scene.cljs"],"mappings":";AAIA,iCAAA,jCAAMA,0EAAOC;AAAb,AACE,GAAA,GAAA,MAAA,LAAiCA;AAAjC,GAAA,EAAA,CAAA,wCAAA,UAAA,CAAAC,gCAAA,nFAAiCD,mFAAAA;AAAjC;;AAAA,GAAA,EAAA,AAAiCA;AAAjC,OAAAE,kCAAYC,qBAAqBH;;AAAjC;;;;AAAA,OAAAE,kCAAYC,qBAAqBH;;;AAEnC,yCAAA,zCAAMI,0FAAqBC,MAAMC;AAAjC,AACE,4DAAA,mFAAA,wIAAA,hRAACC,+CAAOF,0IAAW,AAAA,gFAAKC;;AAE1B,qCAAA,rCAAME,kFAAYH,MAAMC,MAAMG;AAA9B,AACE,GAAI,AAACC,qBAAKD;AACR,OAACE,uGAAMF,MAAM,AAACL,uCAAoBC,MAAMC;;AACxCG;;;AAEJ,gCAAA,hCAAMG,wEAAYP,MAAMC;AAAxB,AACE,GACE,AAACI,qBAAK,AAAA,sFAASJ;uFAEV,AAACO,4CAAI,WAAAC,9IACL,oDAAA,7CAACK;AADI,AAAA,IAAAJ,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAAME;QAAN,AAAAD,4CAAAD,WAAA,IAAA,/DAAQG;AAAR,AAAA,0FAAaD,EAAE,AAACT,mCAAWH,MAAMC,MAAMY;GAD5C,AAAA,sFAASZ;;AAFhB,GAME,AAACc,sBAAM,AAAA,sFAASd;AAChB,mDAAA,WAAAe,vDAACR;AAAD,AAAM,sDAAAQ,/CAACb,mCAAWH,MAAMC;GAAS,AAAA,sFAASA;;AAP5C,AAUE,OAACE,mCAAWH,MAAMC,MAAM,AAAA,sFAASA;;;;;AAErC,oCAAA,pCAAMgB,gFAAgBC;AAAtB,AACE,OAACC,sBACA,WAAKxB;AAAL,AACE,GAAI,AAACD,+BAAMC;AACT,OAACyB,gBAAMzB;;AACPA;;GACJuB;;AAEH,mCAAA,nCAAMG,8EAAerB,MAAMC;AAA3B,AACE,IAAMiB,SAAO,AAACX,8BAAWP,MAAMC;AAA/B,AACE,IAAAqB,WAAQ,2DAAA,mKAAA,uEAAA,2CAAA,kGAAA,yIAAA,3jBAACC,qDAAMtB,oFACkB,AAACuB,2BAAcN,oOACT,AAACD,kCAAeC,0DACpB,AAAA,gFAAKjB,yEACG,AAAA,gGAAaA;IAJxDqB,eAAA,kBAKE,AAAA,6FAAYrB,QACZ,8CAAAqB,SAAA,qEAAA,5HAACC;AAAD,AAAsB,OAAA,6FAAYtB;IANpCqB;AAAA,AAAA,oBAQE,AAAA,mGAAerB;AACf,qDAAAqB,aAAA,qEAAA,hIAACC;mCAADE;AAAA,AAAsB,sKAAAA,/JAACC,8CAAM,AAAA,mGAAezB,OAAOiB;;;IAAnDO;;;;EAAAA;;oCAAAA;;;IAAAA;0BAAAA;;;;;;;AATFH;;;AAWJ,8BAAA,9BAAMK,oEAAU1B;AAAhB,AAAA,0FACG,AAAA,kFAAOA,OAAO,AAAA,iFAAMA;;AAEvB,qCAAA,6CAAA2B,lFAAMI;AAAN,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;aAAA,AAAAE,4CAAAF,eAAA,pEAA+BX;AAA/B,qFACO,AAACe,mBAASlB,sBAAMmB,mBAAShB,jJACzB,OAACiB,+CAAOzC","names":["portfolio.ui.scene/atom?","x","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/IWatchable","portfolio.ui.scene/get-param-overrides","state","scene","cljs.core.get_in","portfolio.ui.scene/get-param*","param","cljs.core/map?","cljs.core.merge","portfolio.ui.scene/get-params","cljs.core.map","p__44325","vec__44326","cljs.core.nth","k","v","cljs.core.into","cljs.core/coll?","p1__44324#","portfolio.ui.scene/get-param-data","params","clojure.walk/postwalk","cljs.core/deref","portfolio.ui.scene/prep-scene-fn","G__44330","cljs.core.assoc","portfolio.ui.code/code-str","rest__44329#","cljs.core.apply","portfolio.ui.scene/sort-key","p__44331","map__44332","cljs.core/--destructure-map","cljs.core.get","portfolio.ui.scene/get-scene-atoms","cljs.core/tree-seq","cljs.core/identity","cljs.core.filter"],"sourcesContent":["(ns portfolio.ui.scene\n  (:require [portfolio.ui.code :as code]\n            [clojure.walk :as walk]))\n\n(defn atom? [x]\n  (satisfies? cljs.core/IWatchable x))\n\n(defn get-param-overrides [state scene]\n  (get-in state [:ui (:id scene) :overrides]))\n\n(defn get-param* [state scene param]\n  (if (map? param)\n    (merge param (get-param-overrides state scene))\n    param))\n\n(defn get-params [state scene]\n  (cond\n    (map? (:params scene))\n    (->> (:params scene)\n         (map (fn [[k v]] [k (get-param* state scene v)]))\n         (into {}))\n\n    (coll? (:params scene))\n    (map #(get-param* state scene %) (:params scene))\n\n    :else\n    (get-param* state scene (:params scene))))\n\n(defn get-param-data [params]\n  (walk/postwalk\n   (fn [x]\n     (if (atom? x)\n       (deref x)\n       x))\n   params))\n\n(defn prep-scene-fn [state scene]\n  (let [params (get-params state scene)]\n    (cond-> (assoc scene\n                   :component-params (code/code-str params)\n                   :rendered-data {:params (get-param-data params)\n                                   :id (:id scene)\n                                   :updated-at (:updated-at scene)})\n      (:component scene)\n      (assoc :component-fn #(:component scene))\n\n      (:component-fn scene)\n      (assoc :component-fn #(apply (:component-fn scene) params %&)))))\n\n(defn sort-key [scene]\n  [(:line scene) (:idx scene)])\n\n(defn get-scene-atoms [{:keys [params]}]\n  (->> (tree-seq coll? identity params)\n       (filter atom?)))\n"],"x_google_ignoreList":[0]}