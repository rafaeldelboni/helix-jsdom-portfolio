{"version":3,"sources":["portfolio/data.cljc"],"mappings":"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","names":["portfolio.data/scenes","cljs.core.atom","portfolio.data/scene-order","portfolio.data/collections","portfolio.data/render-fns","portfolio.data/get-deleted-scenes","scenes","cljs.core/vals","cljs.core/group-by","cljs.core.comp","cljs.core/namespace","cljs.core.mapcat","p__41560","vec__41561","cljs.core.nth","_","cljs.core.sort_by","cljs.core/reverse","cljs.core.partition_all","cljs.core.drop_while","p__41564","vec__41565","a","b","cljs.core._EQ_","cljs.core.keep","cljs.core/second","portfolio.data/purge-removed-scenes","cljs.core.swap_BANG_","cljs.core.apply","cljs.core/dissoc","cljs.core.map","portfolio.data/eventually-purge-scenes","portfolio.homeless/debounce","portfolio.data/get-scene-context","old","new","or__5045__auto__","cljs.core/inc","portfolio.data/get-next-idx","ns","cljs.core/deref","cljs.core.filter","cljs.core/max","portfolio.data/register-scene!","scene","cljs.core/not","cljs.core.ex_info","map__41578","cljs.core/--destructure-map","cljs.core.get","idx","line","cljs.core.get_in","cljs.core/assoc","G__41587","cljs.core.assoc","cljs.core.dissoc","js/Date","cljs.core/empty?","portfolio.homeless/->title","cljs.core/name","G__41591","cljs.core.keyword","portfolio.data/register-collection!","id","collection","js/Error","cljs.core/Keyword","portfolio.data/create-repl-scene","cljs.core.merge","cljs.core/re-find","phosphor.icons/load-icon!","portfolio.data/register-repl-scene!","portfolio.data/register-scene-renderer!","f","cljs.core/conj","portfolio.data/get-tapped-scene","x","fs","cljs.core/first","cljs.core/next"],"sourcesContent":["(ns portfolio.data\n  (:require [phosphor.icons :as icons]\n            [portfolio.homeless :as h]))\n\n(def scenes (atom {}))\n(def scene-order (atom 0))\n(def collections (atom {}))\n(def render-fns (atom []))\n\n(defn get-deleted-scenes\n  \"Finds scenes that have been deleted. All the scenes in the same namespace\n  should have :idx 1 apart. If there are scenes in a namespace that are\n  separated from the rest with :idx more than 1 apart, it means the other scenes\n  have been re-defined.\"\n  [scenes]\n  (->> (vals scenes)\n       (group-by (comp namespace :id))\n       (mapcat\n        (fn [[_ scenes]]\n          (->> scenes\n               (sort-by :idx)\n               reverse\n               (partition-all 2 1)\n               (drop-while (fn [[a b]] (= (- (:idx a) (:idx b)) 1)))\n               (keep second))))))\n\n(defn purge-removed-scenes []\n  (swap! scenes\n         (fn [scenes]\n           (apply dissoc scenes (map :id (get-deleted-scenes scenes))))))\n\n(def eventually-purge-scenes (h/debounce purge-removed-scenes 50))\n\n(defn get-scene-context\n  \"Finds the line number (if available) and index of the scene. Line number 1 very\n  likely means the form was sent to the REPL, not recompiled from a file. When\n  that is the case, we reuse the existing index and line number if possible.\"\n  [old new]\n  (cond\n    (:idx new)\n    {:line (or (:line new) (:line old))\n     :idx (:idx new)}\n\n    (= 1 (:line new))\n    {:line (:line old)\n     :idx (or (:idx old)\n              (swap! scene-order inc))}\n\n    (nil? (:idx new))\n    {:line (or (:line new) (:line old))\n     :idx (swap! scene-order inc)}))\n\n(defn get-next-idx [ns]\n  (->> (vals @scenes)\n       (filter (comp #{ns} namespace :id))\n       (map :idx)\n       (apply max -1)\n       inc))\n\n(defn register-scene! [scene]\n  (if-not (:id scene)\n    (throw (ex-info \"Cannot register scene without :id\" {:scene scene}))\n    (let [{:keys [idx line]} (get-scene-context (get-in @scenes [(:id scene)]) scene)]\n      (swap! scenes assoc (:id scene)\n             (cond-> (assoc (dissoc scene :param)\n                            :line line\n                            :idx idx\n                            :updated-at #?(:cljs (.getTime (js/Date.))\n                                           :clj (.toEpochMilli (java.time.Instant/now))))\n               (empty? (:title scene))\n               (assoc :title (h/->title (name (:id scene))))\n\n               (nil? (:collection scene))\n               (assoc :collection (some-> scene :id namespace keyword))\n\n               (:param scene)\n               (assoc :params (:param scene))))\n      (eventually-purge-scenes)\n      nil)))\n\n(defn register-collection! [id collection]\n  (assert (keyword? id) \"register-collection! must be called with a keyword id as first argument\")\n  (swap! collections assoc id (assoc collection :id id)))\n\n(defn create-repl-scene [scene]\n  (let [idx (get-next-idx \"portfolio.repl\")]\n    (merge scene\n           {:id (keyword \"portfolio.repl\" (str \"scene-\" #?(:cljs (.getTime (js/Date.)))))\n            :title (or (:title scene) #?(:cljs (re-find #\"\\d\\d:\\d\\d:\\d\\d\" (str (js/Date.)))))\n            :idx idx\n            :line (- idx)\n            :icon (icons/icon :phosphor.regular/terminal)\n            :collection :portfolio.repl})))\n\n(defn register-repl-scene! [scene]\n  (register-scene! scene)\n  (when-not (:portfolio.repl @collections)\n    (register-collection!\n     :portfolio.repl\n     {:kind :folder\n      :collection nil\n      :icon (icons/icon :phosphor.regular/terminal-window)\n      :title \"REPL\"})))\n\n(defn register-scene-renderer! [f]\n  (swap! render-fns conj f))\n\n(defn get-tapped-scene [x]\n  (when x\n    (loop [fs @render-fns]\n      (let [f (first fs)\n            scene (when f (f x))]\n        (cond\n          scene (create-repl-scene scene)\n          (next fs) (recur (next fs)))))))\n"],"x_google_ignoreList":[0]}