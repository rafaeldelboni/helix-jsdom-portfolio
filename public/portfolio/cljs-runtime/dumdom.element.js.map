{"version":3,"sources":["dumdom/element.cljc"],"mappings":"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","names":["dumdom.element/*handle-event*","dumdom.element/event-handler","h","cljs.core/fn?","temp__5802__auto__","f","e","dumdom.element/event-entry","attrs","k","clojure.string/replace","cljs.core/name","dumdom.element/camelCase","s","vec__42057","seq__42058","cljs.core/seq","first__42059","cljs.core/first","cljs.core/next","rest","clojure.string.split","clojure.string.join","cljs.core.map","clojure.string/capitalize","dumdom.element/camel-key","cljs.core.keyword","dumdom.element/skip-pixelize-attrs","cljs.core.mapcat","cljs.core/set","dumdom.element/normalize-styles","styles","cljs.core.reduce","p__42063","vec__42064","cljs.core.nth","m","attr","v","cljs.core.update","cljs.core/str","dumdom.element/attr-mappings","p__42070","vec__42071","dumdom.element/data-attr?","cljs.core/re-find","dumdom.element/event-handler?","attr-name","dumdom.element/prep-attrs","dataset","cljs.core.filter","p__42089","vec__42090","cljs.core.into","cljs.core.remove","p__42098","vec__42099","p__42093","vec__42094","clojure.set/rename-keys","event-keys","cljs.core/keys","el-key","or__5045__auto__","cljs.core/contains?","cljs.core/hash","G__42107","cljs.core.apply","cljs.core/dissoc","G__42108","cljs.core.assoc","cljs.core.merge","temp__5804__auto__","enter","remove","destroy","p1__42084#","cljs.core.mapv","p1__42085#","callback","G__42109","dumdom.element/hiccup?","sexp","cljs.core/vector?","cljs.core/map-entry?","cljs.core/Keyword","dumdom.element/class-list","classes","cljs.core/empty?","cljs.core/coll?","p1__42110#","cljs.core.ex_info","dumdom.element/parse-hiccup-symbol","sym","vec__42124","vec__42127","seq__42128","first__42129","_","id","el","cljs.core.concat","G__42130","cljs.core.dissoc","p1__42119#","cljs.core.conj","dumdom.element/explode-styles","p1__42131#","vec__42132","clojure.string/trim","dumdom.element/prep-hiccup-attrs","G__42147","dumdom.element/flatten-seqs","xs","G__42152","vec__42153","seq__42154","first__42155","vec__42185","seq__42186","first__42187","res","x","cljs.core/seq?","dumdom.element/add-namespace","vnode","G__42214","cljs.core.not_EQ_","cljs.core/assoc-in","p1__42208#","dumdom.element/svg?","sel","cljs.core._EQ_","cljs.core/count","dumdom.element/primitive?","dumdom.element/convert-primitive-children","children","iter__5523__auto__","s__42262","cljs.core/LazySeq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","b__42264","cljs.core/chunk-buffer","i__42263","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__42261","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","c","dumdom.element/create-vdom-node","cmap?","cljs.core/map?","G__42265","dumdom.element/inflate-hiccup","tag-name","args","vec__42266","element","dumdom.element/create","dumdom.element/enumerate-key","kmap","cljs.core.get","dumdom.element/realize-children","path","ks","child","vec__42278","vec__42281","n","lk","lk-n","G__42284","G__42285","G__42286","p__42287","map__42288","cljs.core/--destructure-map","dumdom.element/add-comment-node","component-name","render-comments?","component","G__42289","and__5043__auto__","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","seq42293","G__42294","G__42295","self__5754__auto__","fullpath","G__42296","old-vnode","new-vnode","seq__42297","chunk__42298","count__42299","i__42300","c__5568__auto__","cljs.core/chunk-first","node","p1__42290#","G__42304","fexpr__42305","fexpr__42306","seq__42307","chunk__42308","count__42309","i__42310","p1__42291#","G__42314","fexpr__42315","fexpr__42316","p1__42292#"],"sourcesContent":["(ns dumdom.element\n  (:require [clojure.set :as set]\n            [clojure.string :as str]))\n\n(def ^:dynamic *handle-event* nil)\n\n(defn event-handler [h]\n  (if (fn? h)\n    h\n    (if-let [f *handle-event*]\n      ;; At this point we need to \"early\" bind the late bound var. It made it\n      ;; this far, but now it must be frozen in time, so it sticks around for\n      ;; the asynchronous events it will handle after being rendered to the DOM.\n      (fn [e]\n        (f e h))\n      (when (string? h)\n        ;; Strings could be inline JavaScript, so will be allowed when there is\n        ;; no global event handler.\n        h))))\n\n(defn- event-entry [attrs k]\n  [(.toLowerCase (str/replace (name k) #\"^on\" \"\"))\n   (event-handler (attrs k))])\n\n(defn- camelCase [s]\n  (let [[f & rest] (str/split s #\"-\")]\n    (str f (str/join \"\" (map str/capitalize rest)))))\n\n(defn- camel-key [k]\n  (keyword (camelCase (name k))))\n\n(def ^:private skip-pixelize-attrs\n  (->>\n   [:animation-iteration-count\n    :box-flex\n    :box-flex-group\n    :box-ordinal-group\n    :column-count\n    :fill-opacity\n    :flex\n    :flex-grow\n    :flex-positive\n    :flex-shrink\n    :flex-negative\n    :flex-order\n    :font-weight\n    :line-clamp\n    :line-height\n    :opacity\n    :order\n    :orphans\n    :stop-opacity\n    :stroke-dashoffset\n    :stroke-opacity\n    :stroke-width\n    :tab-size\n    :widows\n    :z-index\n    :zoom]\n   (mapcat (fn [k] [k (camel-key k)]))\n   set))\n\n(defn- normalize-styles [styles]\n  (reduce (fn [m [attr v]]\n            (if (number? v)\n              (if (skip-pixelize-attrs attr)\n                (update m attr str)\n                (update m attr str \"px\"))\n              m))\n          styles\n          styles))\n\n(def ^:private attr-mappings\n  {:acceptCharset :accept-charset\n   :accessKey :accesskey\n   :autoCapitalize :autocapitalize\n   :autoComplete :autocomplete\n   :autoFocus :autofocus\n   :autoPlay :autoplay\n   :bgColor :bgcolor\n   :className :class\n   :codeBase :codebase\n   :colSpan :colspan\n   :contentEditable :contenteditable\n   :contextMenu :contextmenu\n   :crossOrigin :crossorigin\n   :dateTime :datetime\n   :dirName :dirname\n   :dropZone :dropzone\n   :encType :enctype\n   :htmlFor :for\n   :formAction :formaction\n   :hrefLang :hreflang\n   :httpEquiv :http-equiv\n   :isMap :ismap\n   :itemProp :itemprop\n   :keyType :keytype\n   :maxLength :maxlength\n   :minLength :minlength\n   :noValidate :novalidate\n   :placeHolder :placeholder\n   :preLoad :preload\n   :radioGroup :radiogroup\n   :readOnly :readonly\n   :rowSpan :rowspan\n   :spellCheck :spellcheck\n   :srcDoc :srcdoc\n   :srcLang :srclang\n   :srcSet :srcset\n   :tabIndex :tabindex\n   :useMap :usemap\n   :accentHeight :accent-height\n   :alignmentBaseline :alignment-baseline\n   :arabicForm :arabic-form\n   :baselineShift :baseline-shift\n   :capHeight :cap-height\n   :clipPath :clip-path\n   :clipRule :clip-rule\n   :colorInterpolation :color-interpolation\n   :colorInterpolationFilters :color-interpolation-filters\n   :colorProfile :color-profile\n   :colorRendering :color-rendering\n   :dominantBaseline :dominant-baseline\n   :enableBackground :enable-background\n   :fillOpacity :fill-opacity\n   :fillRule :fill-rule\n   :floodColor :flood-color\n   :floodOpacity :flood-opacity\n   :fontFamily :font-family\n   :fontSize :font-size\n   :fontSizeAdjust :font-size-adjust\n   :fontStretch :font-stretch\n   :fontStyle :font-style\n   :fontVariant :font-variant\n   :fontWeight :font-weight\n   :glyphName :glyph-name\n   :glyphOrientationHorizontal :glyph-orientation-horizontal\n   :glyphOrientationVertical :glyph-orientation-vertical\n   :horizAdvX :horiz-adv-x\n   :horizOriginX :horiz-origin-x\n   :imageRendering :image-rendering\n   :letterSpacing :letter-spacing\n   :lightingColor :lighting-color\n   :markerEnd :marker-end\n   :markerMid :marker-mid\n   :markerStart :marker-start\n   :overlinePosition :overline-position\n   :overlineThickness :overline-thickness\n   :panose1 :panose-1\n   :paintOrder :paint-order\n   :pointerEvents :pointer-events\n   :renderingIntent :rendering-intent\n   :shapeRendering :shape-rendering\n   :stopColor :stop-color\n   :stopOpacity :stop-opacity\n   :strikethroughPosition :strikethrough-position\n   :strikethroughThickness :strikethrough-thickness\n   :strokeDasharray :stroke-dasharray\n   :strokeDashoffset :stroke-dashoffset\n   :strokeLinecap :stroke-linecap\n   :strokeLinejoin :stroke-linejoin\n   :strokeMiterlimit :stroke-miterlimit\n   :strokeOpacity :stroke-opacity\n   :strokeWidth :stroke-width\n   :textAnchor :text-anchor\n   :textDecoration :text-decoration\n   :textRendering :text-rendering\n   :underlinePosition :underline-position\n   :underlineThickness :underline-thickness\n   :unicodeBidi :unicode-bidi\n   :unicodeRange :unicode-range\n   :unitsPerEm :units-per-em\n   :vAlphabetic :v-alphabetic\n   :vHanging :v-hanging\n   :vIdeographic :v-ideographic\n   :vMathematical :v-mathematical\n   :vectorEffect :vector-effect\n   :vertAdvY :vert-adv-y\n   :vertOriginX :vert-origin-x\n   :vertOriginY :vert-origin-y\n   :wordSpacing :word-spacing\n   :writingMode :writing-mode\n   :xHeight :x-height\n   :xlinkActuate :xlink:actuate\n   :xlinkArcrole :xlink:arcrole\n   :xlinkHref :xlink:href\n   :xlinkRole :xlink:role\n   :xlinkShow :xlink:show\n   :xlinkTitle :xlink:title\n   :xlinkType :xlink:type\n   :xmlBase :xml:base\n   :xmlLang :xml:lang\n   :xmlSpace :xml:space\n   :mountedStyle :mounted-style\n   :leavingStyle :leaving-style\n   :disappearingStyle :disappearing-style})\n\n(defn data-attr? [[k v]]\n  (re-find #\"^data-\" (name k)))\n\n(defn event-handler? [attr-name]\n  (re-find #\"on[A-Z]\" (name attr-name)))\n\n(defn- prep-attrs [attrs]\n  (let [dataset (->> attrs\n                     (filter data-attr?)\n                     (map (fn [[k v]] [(str/replace (name k) #\"^data-\" \"\") v]))\n                     (into {}))\n        attrs (->> attrs\n                   (remove data-attr?)\n                   (map (fn [[k v]] [(camel-key k) v]))\n                   (remove (fn [[k v]] (nil? v)))\n                   (into {}))\n        attrs (set/rename-keys attrs attr-mappings)\n        event-keys (filter event-handler? (keys attrs))\n        el-key (or (:key attrs)\n                   (when (contains? attrs :dangerouslySetInnerHTML)\n                     (hash (:dangerouslySetInnerHTML attrs))))]\n    (cond-> {:attrs (apply dissoc attrs :style :mounted-style :leaving-style :disappearing-style\n                           :component :value :key :ref :dangerouslySetInnerHTML event-keys)\n             :props (cond-> {}\n                      (:value attrs) (assoc :value (:value attrs))\n\n                      (contains? (:dangerouslySetInnerHTML attrs) :__html)\n                      (assoc :innerHTML (-> attrs :dangerouslySetInnerHTML :__html)))\n             :style (merge (normalize-styles (:style attrs))\n                           (when-let [enter (:mounted-style attrs)]\n                             {:delayed (normalize-styles enter)})\n                           (when-let [remove (:leaving-style attrs)]\n                             {:remove (normalize-styles remove)})\n                           (when-let [destroy (:disappearing-style attrs)]\n                             {:destroy (normalize-styles destroy)}))\n             :on (->> event-keys\n                      (mapv #(event-entry attrs %))\n                      (into {}))\n             :hook (merge\n                    {}\n                    (when-let [callback (:ref attrs)]\n                      {:insert #(callback (.-elm %))\n                       :destroy #(callback nil)}))\n             :dataset dataset}\n      el-key (assoc :key el-key))))\n\n(declare create)\n\n(defn hiccup? [sexp]\n  (and (vector? sexp)\n       (not (map-entry? sexp))\n       (or (keyword? (first sexp)) (fn? (first sexp)))))\n\n(defn class-list [classes]\n  (cond\n    (keyword? classes) [(name classes)]\n    (string? classes) [classes]\n    (empty? classes) []\n    (coll? classes) (map #(if (keyword? %) (name %) %) classes)\n    (nil? classes) []\n    :else (throw (ex-info \"Received class name that is neither string, keyword, or a collection of those\"\n                          {:classes classes}))))\n\n(defn parse-hiccup-symbol [sym attrs]\n  (let [[_ id] (re-find #\"#([^\\.#]+)\" sym)\n        [el & classes] (-> (str/replace sym #\"#([^#\\.]+)\" \"\")\n                           (str/split #\"\\.\"))\n        classes (->> (concat\n                      (class-list (:class attrs))\n                      (class-list (:className attrs))\n                      classes)\n                     (remove empty?))]\n    [el\n     (cond-> (dissoc attrs :class :className)\n       id (assoc :id id)\n       (seq classes) (update :className #(str/join \" \" (if % (conj classes %) classes))))]))\n\n(defn explode-styles [s]\n  (->> (str/split s #\";\")\n       (map #(let [[k v] (map str/trim (str/split % #\":\"))]\n               [k v]))\n       (into {})))\n\n(defn prep-hiccup-attrs [attrs]\n  (cond-> attrs\n    (string? (:style attrs)) (update :style explode-styles)))\n\n(defn flatten-seqs [xs]\n  (loop [res []\n         [x & xs] xs]\n    (cond\n      (and (nil? xs) (nil? x)) (seq res)\n      (seq? x) (recur (into res (flatten-seqs x)) xs)\n      :default (recur (conj res x) xs))))\n\n(defn add-namespace [vnode]\n  (cond-> vnode\n    (not= \"foreignObject\" (:sel vnode))\n    (assoc-in [:data :ns] \"http://www.w3.org/2000/svg\")\n\n    (:children vnode)\n    (update :children #(map add-namespace %))))\n\n(defn svg? [sel]\n  (and (= \"s\" (nth sel 0))\n       (= \"v\" (nth sel 1))\n       (= \"g\" (nth sel 2))\n       (or (= 3 (count sel))\n           (= \".\" (nth sel 3))\n           (= \"#\" (nth sel 3)))))\n\n(defn primitive? [x]\n  (or (string? x) (number? x)))\n\n(defn convert-primitive-children [children]\n  (for [c children]\n    (if (primitive? c)\n      {:text c}\n      c)))\n\n;; This is a port of Snabbdom's `h` function, but without the varargs support.\n(defn create-vdom-node [sel attrs children]\n  (let [cmap? (map? children)]\n    (cond-> {:sel sel\n             :data (dissoc attrs :key :dumdom/component-key)\n             :dumdom/component-key (:dumdom/component-key attrs)}\n      (primitive? children)\n      (assoc :text children)\n\n      cmap?\n      (assoc :children [children])\n\n      (and (seq? children) (not cmap?))\n      (assoc :children children)\n\n      :always (update :children convert-primitive-children)\n\n      (svg? sel)\n      add-namespace\n\n      (:key attrs)\n      (assoc :key (:key attrs)))))\n\n(defn inflate-hiccup [sexp]\n  (cond\n    (nil? sexp) (create-vdom-node \"!\" {} \"nil\")\n\n    (not (hiccup? sexp)) sexp\n\n    :default\n    (let [tag-name (first sexp)\n          args (rest sexp)\n          args (if (map? (first args)) args (concat [{}] args))]\n      (if (fn? tag-name)\n        (apply tag-name (rest sexp))\n        (let [[element attrs] (parse-hiccup-symbol (name tag-name) (first args))]\n          (apply create element (prep-hiccup-attrs attrs) (flatten-seqs (rest args))))))))\n\n(defn enumerate-key [kmap k]\n  (let [k (if (string? k) k (str k))]\n    [k (get kmap k 0)]))\n\n(defn realize-children [path xs]\n  (loop [xs (seq xs)\n         res []\n         ks {}]\n    (if (nil? xs)\n      (seq res)\n      (let [x (first xs)\n            child (if (fn? x)\n                    (x path ks)\n                    x)]\n        (recur\n         (next xs)\n         (conj res child)\n         (let [[k n] (:dumdom/component-key child)\n               [lk lk-n] (:dumdom/lookup-key child)]\n           (cond-> (assoc ks k (some-> (or n 0) inc))\n             lk (assoc lk (some-> (or lk-n 0) inc)))))))))\n\n(defn add-comment-node [{:dumdom/keys [component-name render-comments?] :as component}]\n  (cond->> [component]\n    (and render-comments? component-name)\n    (cons (create-vdom-node \"!\" {} component-name))))\n\n(defn create [tag-name attrs & children]\n  (fn [path kmap]\n    (let [attrs (prep-attrs attrs)\n          k (enumerate-key kmap (:key attrs))\n          fullpath (conj path k)]\n      (create-vdom-node\n       tag-name\n       (cond-> attrs\n         (:key attrs) (assoc :key (str/join \".\" k))\n\n         k (assoc :dumdom/component-key k)\n\n         :always\n         (assoc-in [:hook :update]\n                   (fn [old-vnode new-vnode]\n                     (doseq [node (filter #(some-> % .-willEnter) (.-children new-vnode))]\n                       ((.-willEnter node)))\n                     (doseq [node (filter #(some-> % .-willAppear) (.-children new-vnode))]\n                       ((.-willAppear node))))))\n       (->> children\n            (mapcat #(if (seq? %) % [%]))\n            (map inflate-hiccup)\n            (realize-children fullpath)\n            (mapcat add-comment-node))))))\n"],"x_google_ignoreList":[0]}