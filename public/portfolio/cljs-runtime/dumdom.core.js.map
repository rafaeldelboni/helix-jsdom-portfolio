{"version":3,"sources":["dumdom/core.cljs"],"mappings":";;;;AAQA;;;;AAAeA,4BAGb,6CAAA,7CAACC;AAEH;;;AAAeC,yBAEb,6CAAA,7CAACD;AAEH;;;AAAKE,oBAEH,6CAAA,7CAACC,8CAAmBC,6DACAC,yDACAC,oDACAC,oDACAC;AAEtB,0BAAA,1BAAMC,4DAAaC;AAAnB,AACE,QAAM,AAAA,AAAIA,2BAA4B,AAACC,mDAAMV,uBAAWW;;AAE1D,wBAAA,xBAAMC,wDAAWH;AAAjB,AACE,IAAAI,WAAgB,AAAA,AAAIJ;IAApBK,eAAA,AAAAC,gBAAEjB;AAAF,AAAA,QAAAgB,6CAAAA,2CAAAD,YAAAC,uBAAAD;;AAEF,6BAAA,7BAAMG,kEAAgBC,WAAWC;AAAjC,AACE,OAACR,mDAAMZ,0BAAcqB,gBAAMF,WAAWC;;AAExC,+BAAA,/BAAME,sEAAkBH;AAAxB,AACE,OAACP,mDAAMZ,0BAAcuB,iBAAOJ;;AAE9B;;;;;8BAAA,9BAAOK,oEAIJb;AAJH,AAKE,qBAAA,pBAAM,AAAaA;;AACnB,AAACD,wBAAYC;;AACb,OAAqBA;;AAEvB,0BAAA,1BAAMc;AAAN,AACE,uDAAA,hDAACC,sBAAO1B;;AAEV,0BAAA,uDAAA2B,jFAAOI,4DAAaC,UAAUb;AAA9B,AAAA,IAAAS,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;mBAAA,AAAAE,4CAAAF,eAAA,1EAAiDK;AAAjD,AAME,IAAAC,qBAAqB,AAACC,8BAAiBH;AAAvC,AAAA,oBAAAE;AAAA,AAAA,oBAAAA,hBAAWF;AAAX,AACE,IAAAI,2CAAUE;IAAVD,2CAA2B,iBAAAE,mBAAIN;AAAJ,AAAA,oBAAAM;AAAAA;;AAAiBD;;;AAA5C,AAAA,2CAAAD,1CAAUC;;AAAV,IAAA,AACE,IAAAE,WAAQ,iBAAAC,WAAA,mFAAYtB;IAAZuB,WAAA;AAAA,AAAA,kGAAAD,SAAAC,oCAAAD,SAAAC,hJAACV,8CAAAA,iEAAAA;;AAAT,AAAA,GAAA,CAAAQ,YAAA;AAAA;;AAAA,4BAAAA,rBAAoCG;;UADtC,AAAA,2CAAAP,1CAAUE;;AADZ;;;AAIF,sCAAA,tCAAMM,oFAAoBC;AAA1B,AACE,oBAAM,iBAAAC,oBAAKD;AAAL,AAAA,oBAAAC;AAAO,UAAK,AAACC,qBAAKF;;AAAlBC;;;AAAN,AACE,MAAO,gDAAA,mCAAA,2CAAA,9HAACE,8KAA+CH;;AADzD;;AAEA,QAAMP,0CAAiBO;;AAEzB;;;kCAAA,lCAAMI,4EAEHC,EAAEC;AAFL,AAGE,oBAAIb;AACF,OAACA,kDAAiBY,EAAEC;;AACpB,MAAO,KAAAC,MAAA;;;AAEX,AAAA;;;;qBAAA,6BAAAC,lDAAMM;AAAN,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,wDAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAAF;;;AAAA,AAAA,CAAA,0DAAA,6BAAAG,vFAAMD,qEAGH3B,UAAUrB;AAHb,AAAA,IAAAkD,aAAAD;UAAA,AAAAE,4CAAAD,WAAA,IAAA,jEAGwBQ;AAHxB,AAIE,oBAAM,iBAAAvB,oBAAK,AAAA,mGAAeuB;AAApB,AAAA,oBAAAvB;AAAyB,UAAK,AAACC,qBAAK,AAAA,mGAAesB;;AAAnDvB;;;AAAN,AACE,MAAO,gDAAA,hDAACE,uHAA+EqB;;AADzF;;AAEA,IAAMC,eAAa,iBAAA/B,mBAAI,AAACzB,sBAAUH;AAAf,AAAA,oBAAA4B;AAAAA;;AAAwB,OAACf,4BAAWb;;;IACjDQ,aAAW,AAAA,AAAIR;AADrB,AAEE,IAAA4D,2BAAe,AAACxC,wBAAYC,UAAUb,WAAWkD;AAAjD,AAAA,oBAAAE;AAAA,kBAAAA,dAASnD;AAAT,AACE,AAQE,oBAAU,AAAIA;AAAd;AAAA,AACE,mBAAA,lBAAM,AAAIA;;;AACZ,CAACjB,kDAAAA,4EAAAA,5BAAMmE,wDAAAA,3CAAalD,wDAAAA;;AACpB,AAACF,2BAAeC,WAAWC;;AAC7B,AACE,qBAAA,pBAAM,AAAaT;;AACnB,AAACW,6BAAiBH;;;AACtB,oBAAMqD;AAAN,AACE,2EAAA,pEAAC9C,sBAAO+C;;AADV;;;;AAxBJ,CAAA,6CAAA,7CAAMd;;AAAN;AAAA,CAAA,uCAAA,WAAAI,lDAAMJ;AAAN,AAAA,IAAAK,WAAA,AAAAC,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;IAAAI,WAAA,AAAAF,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;AAAA,AAAA,IAAAK,qBAAA;AAAA,AAAA,OAAAA,wDAAAJ,SAAAG,SAAAJ;;;AAAA,AA2BA,AAAA;;;;;;0BAAA,kCAAAV,5DAAMqB;AAAN,AAAA,IAAApB,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAoB,6DAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAAjB;;;AAAA,AAAA,CAAA,+DAAA,6BAAAkB,5FAAMD,0EAKH1C,UAAUrB;AALb,AAAA,IAAAiE,aAAAD;UAAA,AAAAb,4CAAAc,WAAA,IAAA,jEAKwBP;AALxB,AAME,oBAAM,iBAAAvB,oBAAK,AAAA,mGAAeuB;AAApB,AAAA,oBAAAvB;AAAyB,UAAK,AAACC,qBAAK,AAAA,mGAAesB;;AAAnDvB;;;AAAN,AACE,MAAO,gDAAA,hDAACE,4HAAoFqB;;AAD9F;;AAEA,IAAMC,eAAa,AAAC9C,4BAAWb;IACzBQ,aAAW,AAAA,AAAIR;AADrB,AAEE,IAAAuB,2BAAiB,AAACH,wBAAYC,UAAUb,WAAWkD;AAAnD,AAAA,oBAAAnC;AAAA,AAAA,kBAAAA,dAAWd;AAAX,AACE,CAACjB,kDAAAA,4EAAAA,5BAAMmE,wDAAAA,3CAAalD,wDAAAA;;AADtB;;AAEA,oBAAMoD;AAAN,AACE,2EAAA,pEAAC9C,sBAAO+C;;AADV;;;;AAZJ,CAAA,kDAAA,lDAAMC;;AAAN;AAAA,CAAA,4CAAA,WAAAG,vDAAMH;AAAN,AAAA,IAAAI,WAAA,AAAAb,gBAAAY;IAAAA,eAAA,AAAAX,eAAAW;IAAAE,WAAA,AAAAd,gBAAAY;IAAAA,eAAA,AAAAX,eAAAW;AAAA,AAAA,IAAAT,qBAAA;AAAA,AAAA,OAAAA,wDAAAU,SAAAC,SAAAF;;;AAAA,AAeA;;;sBAAA,tBAAMG,oDAEHrE;AAFH,AAGE,oCAAA,AAAA,AAAIA,7BAA6BW;;AAEnC,AAAK2D,wBAAUC;AACf,AAAKC,+BAAWC;AAChB,AAAKC,4BAAcC;AAEnB,8BAAA,9BAAMC,oEAAiBlB,IAAImB;AAA3B,AACE,OAACC,iCAA0BC,cAAKrB,IAAImB;;AAEtC,iCAAA,jCAAMG,0EAAoBtB,IAAImB;AAA9B,AACE,OAACI,oCAA6BF,cAAKrB,IAAImB","names":["dumdom.core/current-nodes","cljs.core.atom","dumdom.core/element-id","dumdom.core/patch","dumdom.core.goog$module$dumdom$snabbdom.init","dumdom.core.goog$module$dumdom$snabbdom.eventListenersModule","dumdom.core.goog$module$dumdom$snabbdom.attributesModule","dumdom.core.goog$module$dumdom$snabbdom.propsModule","dumdom.core.goog$module$dumdom$snabbdom.styleModule","dumdom.core.goog$module$dumdom$snabbdom.datasetModule","dumdom.core/set-root-id","element","cljs.core.swap_BANG_","cljs.core/inc","dumdom.core/root-node","G__43580","fexpr__43579","cljs.core/deref","dumdom.core/register-vnode","element-id","vnode","cljs.core/assoc","dumdom.core/unregister-vnode","cljs.core/dissoc","dumdom.core/init-node!","dumdom.core/purge!","cljs.core/reset!","p__43581","map__43582","cljs.core/--destructure-map","cljs.core.get","dumdom.core/create-vdom","component","handle-event","temp__5804__auto__","dumdom.element/inflate-hiccup","*handle-event*-orig-val__43583","*handle-event*-temp-val__43584","dumdom.element/*handle-event*","or__5045__auto__","G__43585","G__43586","G__43587","cljs.core/clj->js","dumdom.core/set-event-handler!","f","and__5043__auto__","cljs.core/ifn?","cljs.core.ex_info","dumdom.core/dispatch-event-data","e","data","js/Error","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","dumdom.core/render","p__43593","vec__43594","cljs.core.nth","seq43590","G__43591","cljs.core/first","cljs.core/next","G__43592","self__5754__auto__","opt","current-node","temp__5802__auto__","dumdom.component/*render-eagerly?*","dumdom.component/eager-render-required?","dumdom.core/render-once","p__43601","vec__43602","seq43598","G__43599","G__43600","dumdom.core/unmount","dumdom.core/component","dumdom.component/component","dumdom.core/component?","dumdom.component/component?","dumdom.core/render-string","dumdom.string/render","dumdom.core/TransitionGroup","children","dumdom.component/TransitionGroup","dumdom.dom/el","dumdom.core/CSSTransitionGroup","dumdom.component/CSSTransitionGroup"],"sourcesContent":["(ns dumdom.core\n  (:require [dumdom.component :as component]\n            [dumdom.dom :as d]\n            [dumdom.element :as e]\n            [dumdom.string :as string]\n            [dumdom.snabbdom :as snabbdom])\n  (:require-macros [dumdom.core]))\n\n(def ^:private current-nodes\n  \"A mapping from root DOM nodes to currently rendered virtual DOM trees. Used to\n  reconcile (render component dom-node) to (patch old-vdom new-vdom)\"\n  (atom {}))\n\n(def ^:private element-id\n  \"A counter used to assign unique ids to root elements\"\n  (atom -1))\n\n(def patch\n  \"The snabbdom patch function used by render\"\n  (snabbdom/init #js [snabbdom/eventListenersModule\n                      snabbdom/attributesModule\n                      snabbdom/propsModule\n                      snabbdom/styleModule\n                      snabbdom/datasetModule]))\n\n(defn set-root-id [element]\n  (set! (.. element -dataset -dumdomId) (swap! element-id inc)))\n\n(defn root-node [element]\n  (@current-nodes (.. element -dataset -dumdomId)))\n\n(defn register-vnode [element-id vnode]\n  (swap! current-nodes assoc element-id vnode))\n\n(defn unregister-vnode [element-id]\n  (swap! current-nodes dissoc element-id))\n\n(defn- init-node!\n  \"Snabbdom will replace the element provided as the original target for patch.\n  When rendering into a new DOM node, we therefore create an intermediate in it\n  and use that as Snabbdom's root, to avoid destroying the provided root node.\"\n  [element]\n  (set! (.-innerHTML element) \"<div></div>\")\n  (set-root-id element)\n  (.-firstElementChild element))\n\n(defn purge! []\n  (reset! current-nodes {}))\n\n(defn- create-vdom [component element-id {:keys [handle-event]}]\n  ;; The handle event function must be bound dynamically here\n  ;; because the data structure containing event data to pass to\n  ;; it was already built before render was called. This binding\n  ;; avoids having to walk the entire vdom structure before\n  ;; passing it to snabbdom.\n  (when-let [component (e/inflate-hiccup component)]\n    (binding [e/*handle-event* (or handle-event e/*handle-event*)]\n      (some-> (component [element-id] {}) clj->js))))\n\n(defn set-event-handler! [f]\n  (when (and f (not (ifn? f)))\n    (throw (ex-info \"Event handler must be a function\" {:f f})))\n  (set! e/*handle-event* f))\n\n(defn dispatch-event-data\n  \"Dispatch\"\n  [e data]\n  (if e/*handle-event*\n    (e/*handle-event* e data)\n    (throw (js/Error. \"Cannot dispatch custom event data without a global event handler. Call dumdom.core/set-event-handler!\"))))\n\n(defn render\n  \"Render the virtual DOM node created by the component into the specified DOM\n  element, and mount it for fast future re-renders.\"\n  [component element & [opt]]\n  (when (and (:handle-event opt) (not (ifn? (:handle-event opt))))\n    (throw (ex-info \"Called dumdom.core/render with a handle-event that is not a function\" opt)))\n  (let [current-node (or (root-node element) (init-node! element))\n        element-id (.. element -dataset -dumdomId)]\n    (if-let [vnode (create-vdom component element-id opt)]\n      (do\n        ;; If the root node does not have a key, Snabbdom will consider it the\n        ;; same node as the node it is rendered into if they have the same tag\n        ;; name (typically root nodes are divs, and typically they are rendered\n        ;; into divs). When this happens, Snabbdom fires the update hook rather\n        ;; than the insert hook, which breaks dumdom's contract. Forcing the\n        ;; root node to have a key circumvents this problem and ensures the root\n        ;; node has its insert hooks fired on initial render.\n        (when-not (.. vnode -key)\n          (set! (.. vnode -key) \"root-node\"))\n        (patch current-node vnode)\n        (register-vnode element-id vnode))\n      (do\n        (set! (.-innerHTML element) \"\")\n        (unregister-vnode element-id)))\n    (when component/*render-eagerly?*\n      (reset! component/eager-render-required? false))))\n\n(defn render-once\n  \"Like render, but without mounting the element for future updates. This should\n  only be used when you don't expect to re-render the component into the same\n  element. Subsequent calls to render into the same element will always cause a\n  full rebuild of the DOM. This function does not acumulate state.\"\n  [component element & [opt]]\n  (when (and (:handle-event opt) (not (ifn? (:handle-event opt))))\n    (throw (ex-info \"Called dumdom.core/render-once with a handle-event that is not a function\" opt)))\n  (let [current-node (init-node! element)\n        element-id (.. element -dataset -dumdomId)]\n    (when-let [vnode (create-vdom component element-id opt)]\n      (patch current-node vnode))\n    (when component/*render-eagerly?*\n      (reset! component/eager-render-required? false))))\n\n(defn unmount\n  \"Unmount an element previously mounted by dumdom.core/render\"\n  [element]\n  (-> element .-dataset .-dumdomId unregister-vnode))\n\n(def component component/component)\n(def component? component/component?)\n(def render-string string/render)\n\n(defn TransitionGroup [opt children]\n  (component/TransitionGroup d/el opt children))\n\n(defn CSSTransitionGroup [opt children]\n  (component/CSSTransitionGroup d/el opt children))\n"],"x_google_ignoreList":[0]}