{"version":3,"sources":["portfolio/ui/scene_browser.cljs"],"mappings":";AAOA,AAAA,+CAAA,uDAAAA,tGAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,2EAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,2EAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,6EAAA,7EAAMD,wFACFM;AADJ,AAEG,kFAAA,2CAAA,4DAAA,mFAAA,rQAACC,sUAAoCD;;;AAFxC,CAAA,6EAAA,WAAAJ,xFAAMF,iGAGiBM;AAHvB,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;eAAA,AAAAE,4CAAAF,eAAA,tEAGYK;AAHZ,AAIG,6DAAA,+KAAA,rOAACC,6CAAKD,4FAAU,AAAA,gFAAKF;;;AAJxB,CAAA,uEAAA,vEAAMN;;AAAN,AAMA,yCAAA,iDAAAU,1FAAME,mGAAmCE;AAAzC,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAAP,4BAAAO;kBAAA,AAAAN,4CAAAM,eAAA,zEAA2BE;AAA3B,AACE,OAACE,4CAAI,6CAAA,7CAACC,kGAAWH,aAAaC;;AAEhC,AAAA,AAEA,yCAAA,zCAAMG,0FAAaC,IAAIC;AAAvB,AACE,6BAAA,WAAAC,jCAACC;AAAD,AACE,GAAI,6CAAA,mHAAAD,hKAACE;AACH,OAAA,gFAAKH;;AADPC;;GAGD,AAAA,uGAAiBF;;AAEpB,6CAAA,7CAAMK,kGAAiBC,MAAMN,IAAIZ,WAAWQ;AAA5C,AACE,IAAMW,WAAS,AAAClB,2EAAkBW,IAAIZ;IAChCoB,kBAAU,AAACC,+CAAOH,MAAMC;AAD9B,AAEE,IAAAG,WAAA,2CAAA,sJAAA,qDAAA,2DAAA,8GAAA,kHAAA,uJAAA,yDAAA,2CAAA,3qBAAgB,AAAA,oFAAQtB,uLAEN,AAACM,uCAAYY,MAAMV,iEACnB,AAACG,uCAAYC,IAAIZ,gFACZ,AAACuB,iDAAoCL,MAAMlB,WAAWoB,0KACrD;AAAA,AAAAI,+BAAA,kGAAA,mFAAA,kDAAA,2CAAA,wDAAA,6BAAA,2DAAA,sBAAA,mFAAA,qDAAA,2CAAA,uDAAA,MAAA,yDAAA,MAAA,oDAAA,uBAAA,mFAAA,8DAAA,2CAAA,0DAAA,uBAAA,oDAAA,OAAA,yDAAA,eAAA,0EAAA,QAAA,4EAAA,QAAA,oEAAA;;AAAA;;CALxB,2DAAA,mFAAA,mFAAA,sHAAA,xDAMuCL,SAAS,AAACM,cAAIL,+FACzB,mCAAA,KAAA,tBAAIA;IAPhCE,eAAA,kBAQEF,iBACA,8CAAAE,SAAA,vDAACI,8GAAa,iBAAAC,WAA6BT;IAA7BU,WAAmChB;IAAnCiB,WAAuC,AAACE,6CAAKvB,KAAK,AAAA,gFAAKR;AAAvD,AAAA,oLAAA2B,SAAAC,SAAAC,6EAAAF,SAAAC,SAAAC,7RAACC,uFAAAA,mHAAAA;MATjBR;AAAA,AAAA,GAWE,AAACN,6CAAE,AAAA,gFAAKhB,YAAY,AAAA,8FAAaY;AACjC,qDAAAU,aAAA,+DAAA,1HAACI;;AAZHJ;;;AAcJ,4CAAA,5CAAMU,gGAAgBd,MAAMN,IAAIZ,WAAWQ;AAA3C,AACE,IAAMW,WAAS,AAAClB,2EAAkBW,IAAIZ;IAEhCoB,kBAAU,gDAAA,hDAACa,sDAAW,AAACZ,+CAAOH,MAAMC;AAF1C,AAGE,IAAAe,WAAA,2CAAA,sJAAA,qDAAA,yDAAA,8GAAA,2DAAA,mFAAA,mFAAA,4GAAA,zoBAAgB,AAAA,oFAAQlC,qLAEN,AAACM,uCAAYY,MAAMV,qSACPW,SAAS,GAAKC,sGACrB,AAACe,gDAAmCjB,MAAMlB,WAAWoB;AAJ5E,AAAA,GAKEA;AACA,qDAAAc,SAAA,vDAACR,8GAAa,iBAAAU,WAA6BlB;IAA7BmB,WAAmCzB;IAAnC0B,WAAuC,AAACP,6CAAKvB,KAAK,AAAA,gFAAKR;AAAvD,AAAA,oLAAAoC,SAAAC,SAAAC,6EAAAF,SAAAC,SAAAC,7RAACR,uFAAAA,mHAAAA;;;AANjBI;;;AAQJ,2CAAA,3CAAMK,8FAAerB,MAAMN,IAAI4B,MAAMhC;AAArC,AACE,IAAMiC,kBAAU,AAACzB,6CAAE,AAAA,gFAAKwB,OAAO,AAAA,8FAAa5B;AAA5C,AACE,IAAA8B,WAAA,2CAAA,iJAAA,qDAAA,oDAAA,gJAAA,8GAAA,lcAAgB,AAAA,oFAAQF,oLAED,AAACG,+CAAkCzB,MAAMsB,MAAMC,4EACpD,AAACnC,uCAAYY,MAAMV,iEACnB,AAACG,uCAAYC,IAAI4B;IAJnCE,eAAA,sWAAAA,pVAKE,AAAA,2FAAW9B,MAAK,8CAAA8B,SAAA,vDAAChB,yGAAW,AAACkB,kCAAqB,AAAA,2FAAWhC,KAAK4B;AALpE,AAAA,GAMEC;AAAU,qDAAAC,aAAA,+DAAA,1HAAChB;;AANbgB;;;AAQJ,yDAAA,zDAAMZ,0HAA6BZ,MAAMN,IAAIiC;AAA7C,AACE,IAAAC,qBAAA,+EAAAC;AAAA,AAAA,YAAAC,kBAAA,KAAA;AAAA,AAAA,IAAAD,eAAAA;;AAAA,AAAA,IAAAE,qBAAA,AAAAC,cAAAH;AAAA,AAAA,GAAAE;AAAA,AAAA,IAAAF,eAAAE;AAAA,AAAA,GAAA,AAAAE,6BAAAJ;AAAA,IAAAK,kBA24EiD,AAAA4B,sBAAAjC;IA34EjDM,qBAAA,AAAAC,gBAAAF;IAAAG,WAAA,AAAAC,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAI,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAJ;AAAA,WAAA,AAAAK,eAAAN,gBAAAK,tCAAMU;AAAN,AAAA,AAAA,AAAAR,uBAAAJ,SAOE,iBAAAqB,WAAM,AAAA,mFAAOT;IAAbS,eAAA,EAAA,CAAAA,oBAAAC,oBAAA,AAAAD,aAAA;AAAA,AAAA,QAAAA;KAAA;AACW,OAAC3D,2CAAgBC,MAAMN,IAAIuD,KAAKtB;;;KAD3C;AAEU,OAACb,0CAAed,MAAMN,IAAIuD,KAAKtB;;;;AACvC,OAACN,yCAAcrB,MAAMN,IAAIuD,KAAKtB;;;;;AAVlC,eAAA,CAAAY,WAAA;;;;AAAA;;;;;AAAA,OAAAG,qBAAA,AAAAC,gBAAAN,UAAA,AAAAO,qEAAA,AAAAC,qBAAAhB;;AAAA,OAAAa,qBAAA,AAAAC,gBAAAN,UAAA;;;AAAA,WAAA,AAAAS,gBAAAjB,vBAAMoB;AAAN,AAAA,OAAAF,eAOE,iBAAAa,WAAM,AAAA,mFAAOX;IAAbW,eAAA,EAAA,CAAAA,oBAAAD,oBAAA,AAAAC,aAAA;AAAA,AAAA,QAAAA;KAAA;AACW,OAAC7D,2CAAgBC,MAAMN,IAAIuD,KAAKtB;;;KAD3C;AAEU,OAACb,0CAAed,MAAMN,IAAIuD,KAAKtB;;;;AACvC,OAACN,yCAAcrB,MAAMN,IAAIuD,KAAKtB;;;KAVlC,AAAAiB,qEAAA,AAAAI,eAAAnB;;;AAAA;;;;GAAA,KAAA;;AAAA,AAAA,OAAAD,mBAAW,AAACsB,oPACK,AAACC,eAAK,AAAA,kGAAcnD,jOACpB,AAACoD,+CAAO,AAACC,qCAAwB,AAACC,eAAK3B,xLACvC,AAAC4B,gDAAQC,4cACT,AAACL,eAAK,AAAA,uFAASnD,tNACf,AAACoD,+CAAO,AAACC,qCAAwB,AAACC,eAAK3B,/KACvC,AAAC4B,gDAAQE;;AAM5B;;;;;;;;;;6CAAA,7CAAMI,kGASH7D,MAAMN;AATT,AAUE,wEAAA,jEAACkB,uDAA4BZ,MAAMN","names":["var_args","G__44337","portfolio.ui.scene-browser/get-expanded-path","js/Error","p__44338","map__44339","cljs.core/--destructure-map","cljs.core.get","collection","portfolio.ui.scene_browser.get_expanded_path","path-ctx","cljs.core.into","p__44340","map__44341","portfolio.ui.scene-browser/get-context","collections","path","cljs.core.map","cljs.core.comp","portfolio.ui.scene-browser/get-actions","opt","target","p1__44342#","clojure.walk/postwalk","cljs.core._EQ_","portfolio.ui.scene-browser/prepare-package","state","exp-path","expanded?","cljs.core.get_in","G__44343","portfolio.ui.collection/get-package-illustration","phosphor.icons/load-icon!","cljs.core/not","cljs.core.assoc","G__44344","G__44345","G__44346","portfolio.ui.scene-browser/prepare-browser-collections","cljs.core.conj","portfolio.ui.scene-browser/prepare-folder","cljs.core.not_EQ_","G__44347","portfolio.ui.collection/get-folder-illustration","G__44348","G__44349","G__44350","portfolio.ui.scene-browser/prepare-scene","scene","selected?","G__44351","portfolio.ui.collection/get-scene-illustration","portfolio.ui.routes/get-scene-url","parent-ids","iter__5523__auto__","s__44353","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__44355","cljs.core/chunk-buffer","i__44354","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__44352","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","item","cljs.core.concat","cljs.core/vals","cljs.core.filter","portfolio.ui.collection/by-parent-id","cljs.core/last","cljs.core.sort_by","portfolio.ui.collection/get-sort-key","portfolio.ui.scene/sort-key","G__44356","cljs.core/Keyword","G__44357","portfolio.ui.scene-browser/prepare-browser","cljs.core/chunk-first"],"sourcesContent":["(ns portfolio.ui.scene-browser\n  (:require [clojure.walk :as walk]\n            [phosphor.icons :as icons]\n            [portfolio.ui.collection :as collection]\n            [portfolio.ui.routes :as routes]\n            [portfolio.ui.scene :as scene]))\n\n(defn get-expanded-path\n  ([collection]\n   (get-expanded-path {:path-ctx [:ui]} collection))\n  ([{:keys [path-ctx]} collection]\n   (into path-ctx [(:id collection) :expanded?])))\n\n(defn get-context [{:keys [collections]} path]\n  (map (comp :kind collections) path))\n\n(declare prepare-browser-collections)\n\n(defn get-actions [opt target]\n  (walk/postwalk\n   #(if (= ::target-id %)\n      (:id target)\n      %)\n   (:select-actions opt)))\n\n(defn prepare-package [state opt collection path]\n  (let [exp-path (get-expanded-path opt collection)\n        expanded? (get-in state exp-path)]\n    (cond-> {:title (:title collection)\n             :kind :package\n             :context (get-context state path)\n             :actions (get-actions opt collection)\n             :illustration (collection/get-package-illustration state collection expanded?)\n             :toggle {:icon (icons/icon :phosphor.regular/caret-right)\n                      :actions [[:assoc-in exp-path (not expanded?)]]\n                      :rotation (if expanded? 90 0)}}\n      expanded?\n      (assoc :items (prepare-browser-collections state opt (conj path (:id collection))))\n\n      (= (:id collection) (:current-id opt))\n      (assoc :selected? true))))\n\n(defn prepare-folder [state opt collection path]\n  (let [exp-path (get-expanded-path opt collection)\n        ;; Folders are expanded by default\n        expanded? (not= false (get-in state exp-path))]\n    (cond-> {:title (:title collection)\n             :kind :folder\n             :context (get-context state path)\n             :actions [[:assoc-in exp-path (not expanded?)]]\n             :illustration (collection/get-folder-illustration state collection expanded?)}\n      expanded?\n      (assoc :items (prepare-browser-collections state opt (conj path (:id collection)))))))\n\n(defn prepare-scene [state opt scene path]\n  (let [selected? (= (:id scene) (:current-id opt))]\n    (cond-> {:title (:title scene)\n             :kind :item\n             :illustration (collection/get-scene-illustration state scene selected?)\n             :context (get-context state path)\n             :actions (get-actions opt scene)}\n      (:location opt) (assoc :url (routes/get-scene-url (:location opt) scene))\n      selected? (assoc :selected? true))))\n\n(defn prepare-browser-collections [state opt parent-ids]\n  (for [item (concat\n              (->> (vals (:collections state))\n                   (filter (collection/by-parent-id (last parent-ids)))\n                   (sort-by collection/get-sort-key))\n              (->> (vals (:scenes state))\n                   (filter (collection/by-parent-id (last parent-ids)))\n                   (sort-by scene/sort-key)))]\n    (case (:kind item)\n      :package (prepare-package state opt item parent-ids)\n      :folder (prepare-folder state opt item parent-ids)\n      (prepare-scene state opt item parent-ids))))\n\n(defn prepare-browser\n  \"`opt` is a map of:\n\n  - `:select-actions` - Vector of actions to perform to select collection or scene.\n                        Use :portfolio.ui.scene-browser/target-id as a placeholder\n                        for the selected id.\n  - `:path-ctx` - The state path context. Allows for multiple individual menus with\n                  their own state for expand/collapse etc.\n  - `:location` - Optional. When provided, `:url` will be included for scene options.\"\n  [state opt]\n  (prepare-browser-collections state opt []))\n"],"x_google_ignoreList":[0]}