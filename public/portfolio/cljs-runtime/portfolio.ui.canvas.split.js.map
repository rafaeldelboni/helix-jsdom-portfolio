{"version":3,"sources":["portfolio/ui/canvas/split.cljs"],"mappings":"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","names":["portfolio.ui.canvas.split/complement-dir","portfolio.ui.canvas.split/split-layout","layout","path","dir","cljs.core._EQ_","cljs.core/count","portfolio.ui.layout/assign-pane-ids","vec__45219","cljs.core.nth","x","G__45222","cljs.core.update","xs","cljs.core/vec","cljs.core.mapcat","col","i","cljs.core.range","cljs.core.not_EQ_","cljs.core.mapv","cljs.core.update_in","cljs.core/first","cljs.core/rest","portfolio.ui.canvas.split/split-layout-horizontally","p__45223","map__45224","cljs.core/--destructure-map","cljs.core.get","portfolio.ui.canvas.split/prepare-horizontal-split-button","tool","state","pane-path","layout-path","cljs.core/not","portfolio.ui.screen/small-screen?","portfolio.ui.components.canvas-toolbar-buttons/Button","cljs.core/with-meta","phosphor.icons/load-icon!","cljs.core.into","portfolio.ui.canvas.split/horizontal-impl","_","el","opt","portfolio.ui.canvas.split/create-split-horizontally-tool","config","portfolio.ui.canvas.split/split-layout-vertically","p__45225","map__45226","portfolio.ui.canvas.split/prepare-vertical-split-button","portfolio.ui.canvas.split/vertical-impl","portfolio.ui.canvas.split/create-split-vertically-tool","portfolio.ui.canvas.split/prepare-button-group","portfolio.ui.components.canvas-toolbar-buttons/ButtonGroup","p1__45227#","cljs.core.keep","portfolio.ui.canvas.protocols/prepare-toolbar-button","portfolio.ui.canvas.split/create-split-tool","portfolio.ui.canvas.split/close-pane","cljs.core.concat","cljs.core.take","cljs.core.drop","cljs.core.assoc","p__45228","map__45229","portfolio.ui.canvas.split/prepare-close-pane-button","_state","lol","cljs.core/tree-seq","cljs.core/coll?","cljs.core/identity","cljs.core.filter","cljs.core/map?","cljs.core.remove","portfolio.ui.canvas.split/close-impl","portfolio.ui.canvas.split/create-close-tool"],"sourcesContent":["(ns portfolio.ui.canvas.split\n  (:require [phosphor.icons :as icons]\n            [portfolio.ui.canvas.protocols :as protocols]\n            [portfolio.ui.components.canvas-toolbar-buttons :refer [Button ButtonGroup]]\n            [portfolio.ui.layout :as layout]\n            [portfolio.ui.screen :as screen]))\n\n(def complement-dir\n  {:cols :rows\n   :rows :cols})\n\n(defn split-layout [layout path dir]\n  (cond\n    (= 0 (count path))\n    {:kind dir\n     :xs [layout (layout/assign-pane-ids layout)]}\n\n    (= 1 (count path))\n    (let [[x] path]\n      (cond-> layout\n        (= dir (:kind layout))\n        (update :xs (fn [xs]\n                      (vec (mapcat (fn [col i]\n                                     (if (= i x)\n                                       [col (layout/assign-pane-ids col)]\n                                       [col]))\n                                   xs (range)))))\n\n        (not= dir (:kind layout))\n        (update :xs (fn [xs]\n                      (mapv (fn [col i]\n                              (if (= i x)\n                                {:kind dir\n                                 :xs [col (layout/assign-pane-ids col)]}\n                                col))\n                            xs (range))))))\n\n    :else\n    (update-in layout [:xs (first path)] split-layout (rest path) dir)))\n\n(defn split-layout-horizontally [layout path]\n  (split-layout layout path :cols))\n\n(defn prepare-horizontal-split-button [tool state {:keys [pane-path layout-path layout]}]\n  (when (or (not (:desktop-only? tool)) (not (screen/small-screen? state)))\n    (with-meta\n      {:title (:title tool)\n       :icon (icons/icon :phosphor.regular/columns)\n       :actions [[:assoc-in (into layout-path [:layout])\n                  (split-layout-horizontally layout pane-path)]]}\n      {`protocols/render-toolbar-button #'Button})))\n\n(def horizontal-impl\n  {`protocols/prepare-canvas (fn [_ el opt])\n   `protocols/prepare-toolbar-button #'prepare-horizontal-split-button})\n\n(defn create-split-horizontally-tool [config]\n  (with-meta\n    {:id :canvas/split-horizontally\n     :title \"Split horizontally\"\n     :desktop-only? (:canvas.split/desktop-only? config true)}\n    horizontal-impl))\n\n(defn split-layout-vertically [layout path]\n  (split-layout layout path :rows))\n\n(defn prepare-vertical-split-button [tool state {:keys [pane-path layout-path layout]}]\n  (when (or (not (:desktop-only? tool)) (not (screen/small-screen? state)))\n    (with-meta\n      {:title (:title tool)\n       :icon (icons/icon :phosphor.regular/rows)\n       :actions [[:assoc-in (into layout-path [:layout])\n                  (split-layout-vertically layout pane-path)]]}\n      {`protocols/render-toolbar-button #'Button})))\n\n(def vertical-impl\n  {`protocols/prepare-canvas (fn [_ el opt])\n   `protocols/prepare-toolbar-button #'prepare-vertical-split-button})\n\n(defn create-split-vertically-tool [config]\n  (with-meta\n    {:id :canvas/split-vertically\n     :title \"Split vertically\"\n     :desktop-only? (:canvas.split/desktop-only? config true)}\n    vertical-impl))\n\n(defn prepare-button-group [tool state opt]\n  (with-meta\n    {:buttons (->> (:buttons tool)\n                   (keep #(protocols/prepare-toolbar-button % state opt)))}\n    {`protocols/render-toolbar-button #'ButtonGroup}))\n\n(defn create-split-tool [config]\n  (with-meta\n    {:id :canvas/split\n     :buttons [(create-split-horizontally-tool config)\n               (create-split-vertically-tool config)]}\n    {`protocols/prepare-toolbar-button #'prepare-button-group}))\n\n(defn close-pane [layout path]\n  (if (= 1 (count path))\n    (let [xs (vec (concat\n                   (take (first path) (:xs layout))\n                   (drop (inc (first path)) (:xs layout))))]\n      (if (= 1 (count xs))\n        (first xs)\n        (assoc layout :xs xs)))\n    (update-in layout [:xs (first path)] close-pane (rest path))))\n\n(defn prepare-close-pane-button [tool _state {:keys [pane-path layout-path layout] :as lol}]\n  (when (and (< 1 (->> layout\n                       (tree-seq coll? identity)\n                       (filter map?)\n                       (remove :kind)\n                       count))\n             (< 0 (count pane-path)))\n    (with-meta\n      {:title (:title tool)\n       :icon (icons/icon :phosphor.regular/x)\n       :align :right\n       :actions [[:assoc-in (into layout-path [:layout])\n                  (close-pane layout pane-path)]]}\n      {`protocols/render-toolbar-button #'Button})))\n\n(def close-impl\n  {`protocols/prepare-canvas (fn [_ el opt])\n   `protocols/prepare-toolbar-button #'prepare-close-pane-button})\n\n(defn create-close-tool [config]\n  (with-meta\n    {:id :canvas/close\n     :title \"Close pane\"}\n    close-impl))\n"],"x_google_ignoreList":[0]}