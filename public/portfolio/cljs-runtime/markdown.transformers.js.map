{"version":3,"sources":["markdown/transformers.cljc"],"mappings":"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","names":["markdown.transformers/heading?","text","type","cljs.core/every?","cljs.core.take","trimmed","G__44036","clojure.string/trim","and__5043__auto__","cljs.core/not-empty","markdown.transformers/h1?","markdown.transformers/h2?","p__44037","map__44038","cljs.core/--destructure-map","cljs.core.get","markdown.transformers/empty-line","code","codeblock","state","or__5045__auto__","clojure.string/blank?","cljs.core.dissoc","markdown.transformers/superscript","tokens","cljs.core.partition_by","cljs.core.partial","cljs.core/contains?","buf","remaining","cljs.core/empty?","clojure.string.join","cljs.core._EQ_","cljs.core/first","cljs.core.into","cljs.core.concat","cljs.core/seq","cljs.core/second","cljs.core.drop","cljs.core/rest","p__44039","map__44040","markdown.transformers/heading","next-line","heading-anchors","cljs.core.assoc","temp__5802__auto__","heading","markdown.common/make-heading","p__44041","map__44042","markdown.transformers/br","lists","cljs.core/take-last","cljs.core/not","cljs.core.apply","cljs.core/str","cljs.core.drop_last","p__44044","map__44045","markdown.transformers/autourl-transformer","frozen-strings","currently-frozen","cljs.core/volatile!","p1__44043#","clojure.string/replace","vec__44046","cljs.core.nth","url","cljs.core/deref","markdown.common.freeze_string","cljs.core.subs","cljs.core/count","cljs.core/vreset!","cljs.core.merge","markdown.transformers/autoemail-transformer","left-pad","s","G__44050","encoder","c","markdown.transformers/*formatter*","p1__44049#","encoded","cljs.core.map","p__44051","map__44052","markdown.transformers/set-line-state","inline-heading","cljs.core/assoc-in","markdown.transformers/clear-line-state","markdown.transformers/paragraph-text","last-line-empty?","p__44053","map__44054","markdown.transformers/open-paragraph","eof","temp","hr","blockquote","paragraph","p__44055","map__44056","markdown.transformers/close-paragraph","G__44057","clojure.string/ends-with?","markdown.transformers/paragraph","p__44058","map__44059","markdown.transformers/code","indent-code-end","should-close?","clojure.string/starts-with?","markdown.common/escape-code","clojure.string/replace-first","G__44060","num-spaces","cljs.core.take_while","cljs.core/=","G__44061","p__44062","map__44063","markdown.transformers/codeblock","codeblock-end","indented-code","next-line-closes?","G__44064","clojure.string.split","vec__44065","lang","cljs.core/split-with","cljs.core/not=","formatter","markdown.transformers/hr","cljs.core.drop_while","cljs.core.remove","p__44068","map__44069","markdown.transformers/blockquote-1","p__44070","map__44071","markdown.transformers/blockquote-2","blockquote-start","blockquote-end","blockquote-paragraph","not-in-list","markdown.transformers/footer","footnotes","cljs.core/sorted-map","cljs.core.reduce","p__44073","vec__44074","id","label","cljs.core.interpose","p1__44072#","markdown.transformers/parse-metadata-line","line","vec__44077","vec__44080","_","key","val","cljs.core/re-matches","next-val","cljs.core.not_EQ_","cljs.core.keyword","clojure.string/lower-case","markdown.transformers/flatten-metadata","metadata","acc","remain","prev-key","vec__44086","data","cljs.core/sequential?","prev-val","postfix","norm-val","new-val","cljs.core.conj","markdown.transformers/parse-wiki-metadata-headers","lines-seq","parsed","cljs.core/reduced","markdown.transformers/parse-yaml-metadata-headers","js/Error","markdown.transformers/parse-edn-metadata-headers","meta-lines","cljs.core.comp","clojure.edn.read_string","markdown.transformers/parse-metadata-headers","cljs.core/string?","markdown.transformers/transformer-vector","markdown.common/inhibit","markdown.common/escape-inhibit-separator","markdown.common/escaped-chars","markdown.common/inline-code","markdown.links/image","markdown.links/image-reference-link","markdown.links/link","markdown.links/implicit-reference-link","markdown.links/reference-link","markdown.links/footnote-link","markdown.lists/li","markdown.common/italics","markdown.common/bold-italic","markdown.common/em","markdown.common/strong","markdown.common/bold","markdown.common/strikethrough","markdown.tables/table","markdown.common/thaw-strings","markdown.common/dashes"],"sourcesContent":["(ns markdown.transformers\n  (:require [clojure.string :as string]\n            [clojure.edn :as edn]\n            [markdown.links\n             :refer [link\n                     image\n                     reference-link\n                     image-reference-link\n                     implicit-reference-link\n                     footnote-link]]\n            [markdown.lists :refer [li]]\n            [markdown.tables :refer [table]]\n            [markdown.common\n             :refer\n             [escape-code\n              escaped-chars\n              freeze-string\n              thaw-strings\n              strong\n              bold\n              bold-italic\n              em\n              italics\n              strikethrough\n              inline-code\n              escape-inhibit-separator\n              inhibit\n              make-heading\n              dashes]]\n            #?(:clj [clj-yaml.core :as yaml])))\n\n(def ^:dynamic *formatter*)\n\n(defn heading? [text type]\n  (when-not (every? #{\\space} (take 4 text))\n    (let [trimmed (some-> text string/trim)]\n      (and (not-empty trimmed) (every? #{type} trimmed)))))\n\n(defn h1? [text]\n  (heading? text \\=))\n\n(defn h2? [text]\n  (heading? text \\-))\n\n(defn empty-line [text {:keys [code codeblock] :as state}]\n  (if (or code codeblock)\n    [text state]\n    [(if (or (h1? text) (h2? text)) \"\" text)\n     (if (string/blank? text) (dissoc state :hr :heading) state)]))\n\n(defn superscript [text state]\n  (if (:code state)\n    [text state]\n    (let [tokens (partition-by (partial contains? #{\\^ \\space}) text)]\n      (loop [buf       []\n             remaining tokens]\n        (cond\n          (empty? remaining)\n          [(string/join buf) state]\n\n          (= (first remaining) [\\^])\n          (recur (into buf (concat (seq \"<sup>\") (second remaining) (seq \"</sup>\")))\n                 (drop 2 remaining))\n\n          :default\n          (recur (into buf (first remaining)) (rest remaining)))))))\n\n(defn heading [text {:keys [buf next-line code codeblock heading-anchors] :as state}]\n  (cond\n    (or codeblock code)\n    [text state]\n\n    (h1? (or buf next-line))\n    [(str \"<h1>\" text \"</h1>\") (assoc state :heading true)]\n\n    (h2? (or buf next-line))\n    [(str \"<h2>\" text \"</h2>\") (assoc state :heading true)]\n\n    :else\n    (if-let [heading (make-heading text heading-anchors)]\n      [heading (assoc state :inline-heading true)]\n      [text state])))\n\n(defn br [text {:keys [code lists] :as state}]\n  [(if (and (= [\\space \\space] (take-last 2 text))\n            (not (or code lists)))\n     (str (apply str (drop-last 2 text)) \"<br />\")\n     text)\n   state])\n\n(defn autourl-transformer [text {:keys [code frozen-strings] :as state}]\n  (if code\n    [text state]\n    (let [currently-frozen (volatile! {:frozen-strings frozen-strings})]\n      [(string/replace\n         text\n         #\"<https?://[-A-Za-z0-9+&@#/%?=~_()|!:,.;]*[-A-Za-z0-9+&@#/%=~_()|]>\"\n         #(let [[url frozen-strings] (freeze-string (subs % 1 (dec (count %))) @currently-frozen)]\n            (vreset! currently-frozen frozen-strings)\n            (str \"<a href=\\\"\" url \"\\\">\" url \"</a>\")))\n       (merge state @currently-frozen)])))\n\n(defn autoemail-transformer [text state]\n  (let [left-pad (fn [s]\n                   (cond->> s\n                            (= 1 (count s)) (str \"0\")))\n        encoder  (if (:clojurescript state)\n                   (fn [c] (str \"&#x\" (-> c (.charCodeAt 0) (.toString 16) left-pad) \";\"))\n                   (fn [c] (*formatter* \"&#x%02x;\" (int c))))]\n    [(if (or (:code state) (:codeblock state))\n       text\n       (string/replace\n         text\n         #\"<[\\w._%+-]+@[\\w.-]+\\.[\\w]{2,4}>\"\n         #(let [encoded (->> (subs % 1 (dec (count %)))\n                             (map encoder)\n                             (apply str))]\n            (str \"<a href=\\\"mailto:\" encoded \"\\\">\" encoded \"</a>\"))))\n     state]))\n\n(defn set-line-state [text {:keys [inline-heading] :as state}]\n  [text\n   (-> state\n       (dissoc :inline-heading)\n       (assoc-in [:temp :inline-heading] inline-heading))])\n\n(defn clear-line-state [text state]\n  [text (dissoc state :temp)])\n\n(defn paragraph-text [last-line-empty? text]\n  (if (and (not last-line-empty?) (not-empty text))\n    (str \" \" text)\n    text))\n\n(defn open-paragraph\n  [text {:keys [eof heading inline-heading temp hr code lists blockquote paragraph last-line-empty?] :as state}]\n  (cond\n    (and paragraph lists)\n    [(str \"</p>\" text) (dissoc state :paragraph)]\n\n    (or heading inline-heading hr code lists blockquote)\n    [text state]\n\n    paragraph\n    (if (or eof (empty? (string/trim text)))\n      [(str (paragraph-text last-line-empty? text) \"</p>\") (dissoc state :paragraph)]\n      [(paragraph-text last-line-empty? text) state])\n\n    (and (not eof) (not (string/blank? text)) (or (:inline-heading temp) last-line-empty?))\n    [(str \"<p>\" text) (assoc state :paragraph true :last-line-empty? false)]\n\n    :default\n    [text state]))\n\n(defn close-paragraph [text {:keys [next-line paragraph] :as state}]\n  (if (and paragraph (some-> next-line string/trim (string/ends-with? \"```\")))\n    [(str text \"</p>\") (dissoc state :paragraph)]\n    [text state]))\n\n(defn paragraph [text state]\n  (apply close-paragraph (open-paragraph text state)))\n\n(defn code [text {:keys [eof indent-code-end next-line lists code codeblock paragraph] :as state}]\n  (let [should-close? (or eof\n                          (not (or (string/blank? next-line)\n                                   (string/starts-with? next-line \"    \"))))]\n    (cond\n      (or lists codeblock)\n      [text state]\n\n      indent-code-end\n      [text (-> state\n                (dissoc :code :indent-code-end :indented-code)\n                (assoc :last-line-empty? true))]\n\n      code\n      [(str (escape-code (string/replace-first text #\"    \" \"\\n\"))\n            (when should-close? \"</code></pre>\"))\n       (cond-> state\n         should-close? (assoc :indent-code-end true))]\n\n      paragraph\n      [text state]\n\n      (empty? (string/trim text))\n      [text state]\n\n      :default\n      (let [num-spaces (count (take-while (partial = \\space) text))]\n        (if (>= num-spaces 4)\n          [(str \"<pre><code>\"\n                (escape-code (string/replace-first text #\"    \" \"\"))\n                (when should-close? \"</code></pre>\"))\n           (cond-> (assoc state :code true :indented-code true)\n             should-close? (assoc :indent-code-end true))]\n          [text state])))))\n\n(defn codeblock [text {:keys [codeblock codeblock-end indented-code next-line lists] :as state}]\n  (let [trimmed           (string/trim text)\n        next-line-closes? (some-> next-line string/trim (string/ends-with? \"```\"))]\n    (cond\n      (and lists codeblock-end)\n      [\"\" (dissoc state :code :codeblock :codeblock-end)]\n\n      codeblock-end\n      [text (-> state\n                (assoc :last-line-empty? true)\n                (dissoc :code :codeblock :codeblock-end))]\n\n      (and next-line-closes? codeblock)\n      [(str (escape-code (str text \\newline (apply str (first (string/split next-line #\"```\"))))) \"</code></pre>\")\n       (assoc state :skip-next-line? (not lists)\n                    :codeblock-end true\n                    :last-line-empty? (not lists))]\n\n      (and\n        (not indented-code)\n        (string/starts-with? trimmed \"```\"))\n      (let [[lang code] (split-with (partial not= \\newline) (drop 3 trimmed))\n            lang      (string/trim (string/join lang))\n            s         (apply str (rest code))\n            formatter (:code-style state)]\n        [(str \"<pre><code\" (when (seq lang)\n                             (str \" \"\n                                  (if formatter\n                                    (formatter lang)\n                                    (str \"class=\\\"\" (string/join lang) \"\\\"\")))) \">\"\n              (escape-code (if (empty? s) s (str s \"\\n\")))\n              (when next-line-closes? \"</code></pre>\"))\n         (if next-line-closes?\n           (assoc state :codeblock-end true :skip-next-line? true)\n           (assoc state :code true :codeblock true))])\n\n      codeblock\n      [(str (escape-code text) \"\\n\") state]\n\n      :default\n      [text state])))\n\n(defn hr [text state]\n  (if (:code state)\n    [text state]\n    (if (and\n          (or (empty? (drop-while #{\\* \\space} text))\n              (empty? (drop-while #{\\- \\space} text))\n              (empty? (drop-while #{\\_ \\space} text)))\n          (> (count (remove #{\\space} text)) 2))\n      [(str \"<hr/>\") (assoc state :hr true)]\n      [text state])))\n\n(defn blockquote-1\n  \"Check for blockquotes and signal to blockquote-2 function with\n  states blockquote-start and blockquote-end so that tags can be added.\n  This approach enables lists to be included in blockquotes.\"\n  [text {:keys [eof code codeblock] :as state}]\n  (let [trimmed (string/trim text)]\n    (cond\n      (or code codeblock)\n      [text state]\n\n      (:blockquote state)\n      (cond (or eof (empty? trimmed))\n            [text (assoc state :blockquote-end true :blockquote false)]\n\n            (= \">\" trimmed)\n            [(str (when (:blockquote-paragraph state) \"</p>\") \"<p>\") (assoc state :blockquote-paragraph true)]\n\n            (and (>= (count trimmed) 2) (= \">-\" (subs trimmed 0 2)))\n            [(str (when (:blockquote-paragraph state) \"</p>\") \"<footer>\" (subs text 2) \"</footer>\") (assoc state :blockquote-paragraph false)]\n\n            (= \">\" (subs trimmed 0 1))\n            [(str (when-not (:blockquote-paragraph state) \"<p>\") (subs text 1) \" \") (assoc state :blockquote-paragraph true)]\n\n            :default\n            [(str (when-not (:blockquote-paragraph state) \"<p>\") text \" \") (assoc state :blockquote-paragraph true)])\n\n      :default\n      (if (= \\> (first text))\n        [(str (string/join (rest text)) \" \")\n         (assoc state :blockquote-start true :blockquote true :blockquote-paragraph true)]\n        [text state]))))\n\n(defn blockquote-2\n  \"Check for change in blockquote states and add start or end tags.\n  Closing a blockquote with a list in it is a bit more complex,\n  as the list is not closed until the following blank line.\"\n  [text {:keys [blockquote-start blockquote-end blockquote-paragraph lists] :as state}]\n  (let [not-in-list (or (not lists) (empty? lists))]\n    (cond blockquote-start\n          [(str \"<blockquote><p>\" text)\n           (dissoc state :blockquote-start)]\n\n          (and blockquote-end not-in-list)\n          [(str text (when blockquote-paragraph \"</p>\") \"</blockquote>\")\n           (dissoc state :blockquote :blockquote-paragraph :blockquote-end)]\n\n          :default\n          [text state])))\n\n(defn footer [footnotes]\n  (if (empty? (:processed footnotes))\n    \"\"\n    (->> (:processed footnotes)\n         (into (sorted-map))\n         (reduce\n           (fn [footnotes [id label]]\n             (str footnotes\n                  \"<li id='fn-\" id \"'>\"\n                  (apply str (interpose \" \" label))\n                  \"<a href='#fnref\" id \"'>&#8617;</a></li>\"))\n           \"\")\n         (#(str \"<ol class='footnotes'>\" % \"</ol>\")))))\n\n(defn parse-metadata-line\n  \"Given a line of metadata header text return either a list containing a parsed\n  and normalizd key and the original text of the value, or if no header is found\n  (this is a continuation or new value from a pervious header key) simply\n  return the text. If a blank or invalid line is found return nil.\"\n  [line]\n  (when line\n    (let [[_ key val] (re-matches #\"^([0-9A-Za-z_-]*):(.*)$\" line)\n          [_ next-val] (re-matches #\"^    (.*)$\" line)]\n      (when (not= (string/trim line) \"\")\n        (cond\n          key [(keyword (string/lower-case key)) val]\n          next-val line)))))\n\n(defn flatten-metadata\n  \"Given a list of maps which contain a single key/value, flatten them all into\n  a single map with all the leading spaces removed. If an empty list is provided\n  then return nil.\"\n  [metadata]\n  (when (pos? (count metadata))\n    (loop [acc      {}\n           remain   metadata\n           prev-key nil]\n      (if (seq remain)\n        (let [data     (first remain)\n              [key val] (if (sequential? data) data [prev-key data])\n              prev-val (get acc key [])\n              postfix  (if (= [\\space \\space] (take-last 2 val)) \"\\n\" \"\")\n              norm-val (str (string/trim val) postfix)\n              new-val  (if-not (empty? norm-val)\n                         (conj prev-val norm-val)\n                         prev-val)]\n          (recur (merge acc {key new-val}) (rest remain) key))\n        acc))))\n\n\n(defn parse-wiki-metadata-headers\n  [lines-seq]\n  (reduce\n    (fn [acc line]\n      (if-let [parsed (parse-metadata-line line)]\n        (conj acc parsed)\n        (reduced [(flatten-metadata acc) (count acc)])))\n    [] lines-seq))\n\n(defn parse-yaml-metadata-headers\n  [lines-seq]\n  #?(:clj\n     (let [yaml-lines (->> lines-seq\n                           ;; leave off opening ---\n                           (drop 1)\n                           ;; take lines until we see the closing ---\n                           (take-while (comp not (partial re-matches #\"---\\s*\"))))]\n       [(->> yaml-lines\n             ;; join together and parse\n             (string/join \"\\n\")\n             yaml/parse-string)\n        ;; number of lines consumed must consider opening and closing ---\n        (+ (count yaml-lines) 2)])\n     :cljs\n     (throw (js/Error. \"YAML is unsupported in ClojureScript mode\"))))\n\n(defn parse-edn-metadata-headers\n  [lines-seq]\n  ;; take sequences until you hit an empty line\n  (let [meta-lines (take-while (comp not (partial re-matches #\"\\s*\"))\n                               lines-seq)]\n    [(->> meta-lines\n          ;; join together and parse\n          (string/join \"\\n\")\n          edn/read-string)\n     ;; count the trailing empty line\n     (inc (count meta-lines))]))\n\n(defn parse-metadata-headers\n  \"Given a sequence of lines from a markdown document, attempt to parse a\n  metadata header if it exists. Accepts wiki, yaml, and edn formats.\n   \n  Returns the parsed headers number of lines the metadata spans\"\n  [lines-seq]\n  {:pre [(sequential? lines-seq)\n         (every? string? lines-seq)]}\n  (cond\n    ;; Treat as yaml\n    (re-matches #\"---\\s*\" (first lines-seq))\n    (parse-yaml-metadata-headers lines-seq)\n    ;; Treat as wiki\n    (re-matches #\"\\w+: .*\" (first lines-seq))\n    (parse-wiki-metadata-headers lines-seq)\n    ;; Treat as edn\n    (re-matches #\"\\{.*\" (first lines-seq))\n    (parse-edn-metadata-headers lines-seq)))\n\n(def transformer-vector\n  [set-line-state\n   empty-line\n   inhibit\n   escape-inhibit-separator\n   code\n   codeblock\n   escaped-chars\n   inline-code\n   autoemail-transformer\n   autourl-transformer\n   image\n   image-reference-link\n   link\n   implicit-reference-link\n   reference-link\n   footnote-link\n   hr\n   blockquote-1\n   li\n   heading\n   blockquote-2\n   italics\n   bold-italic\n   em\n   strong\n   bold\n   strikethrough\n   superscript\n   table\n   paragraph\n   br\n   thaw-strings\n   dashes\n   clear-line-state])\n"],"x_google_ignoreList":[0]}