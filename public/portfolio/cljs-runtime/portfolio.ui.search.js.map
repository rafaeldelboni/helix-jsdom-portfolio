{"version":3,"sources":["portfolio/ui/search.cljs"],"mappings":"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","names":["portfolio.ui.search/get-diff-keys","m1","m2","cljs.core.filter","p__45415","vec__45416","cljs.core.nth","k","v","cljs.core.not_EQ_","cljs.core.map","cljs.core/first","portfolio.ui.search/get-diffables","f","xs","p__45419","vec__45420","cljs.core/ifn?","cljs.core.into","portfolio.ui.search/indexable?","x","cljs.core/fn?","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/IWatchable","portfolio.ui.search/->indexable","cljs.core/map?","cljs.core.comp","cljs.core/second","cljs.core/coll?","portfolio.ui.search/get-indexable-data","res","cljs.core.dissoc","cljs.core.update","portfolio.ui.search/get-params-data","scene","cljs.core/tree-seq","cljs.core/identity","p1__45424#","cljs.core/Keyword","portfolio.ui.search/ngram-tokenizers","portfolio.ui.search.pliable-index/stringify-keyword","portfolio.ui.search.pliable-index/remove-diacritics","portfolio.ui.search.pliable-index/tokenize-words","cljs.core.partial","portfolio.ui.search.pliable-index/tokenize-ngrams","portfolio.ui.search/prefix-tokenizers","portfolio.ui.search.pliable-index/tokenize-edge-ngrams","portfolio.ui.search/index-scene","index","portfolio.ui.search.pliable-index/index-document","portfolio.ui.search/search","q","portfolio.ui.search.pliable-index/query","portfolio.ui.search/create-index","cljs.core.atom","portfolio.ui.search/t_portfolio$ui$search45425","_","doc","cljs.core.swap_BANG_","cljs.core/deref","portfolio.ui.search/prepare-result","state","location","result","portfolio.ui.collection/by-id","portfolio.ui.collection/get-illustration","portfolio.ui.routes/get-location","portfolio.ui.search/prepare-search","cljs.core/not-empty","phosphor.icons/load-icon!","cljs.core.remove","cljs.core/nil?","iter__5523__auto__","s__45429","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__45431","cljs.core/chunk-buffer","i__45430","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__45428","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","cljs.core.take","G__45432","G__45433","portfolio.ui.search.protocols/SearchResult","portfolio.ui.search.protocols/prepare-result","cljs.core/chunk-first"],"sourcesContent":["(ns portfolio.ui.search\n  (:require [phosphor.icons :as icons]\n            [portfolio.ui.collection :as collection]\n            [portfolio.ui.routes :as routes]\n            [portfolio.ui.search.pliable-index :as pliable]\n            [portfolio.ui.search.protocols :as index]))\n\n(defn get-diff-keys [m1 m2]\n  (->> m1\n       (filter (fn [[k v]] (not= (m2 k) v)))\n       (map first)))\n\n(defn get-diffables [f xs]\n  (->> xs\n       (map (fn [[k v]]\n              [k (if (ifn? f) (f v) v)]))\n       (into {})))\n\n(defn indexable? [x]\n  (and (not (fn? x))\n       (not (satisfies? cljs.core/IWatchable x))))\n\n(defn ->indexable [x]\n  (cond\n    (map? x)\n    (->> x\n         (filter (comp indexable? second))\n         (into {}))\n\n    (coll? x)\n    (filter indexable? x)\n\n    :else\n    (if (indexable? x)\n      x\n      nil)))\n\n(defn get-indexable-data [x]\n  (let [res (->> (dissoc x :updated-at :line :idx :component :component-fn)\n                 ->indexable)]\n    (cond\n      (map? (:params res))\n      (update res :params ->indexable)\n\n      (coll? (:params res))\n      (update res :params ->indexable)\n\n      :else\n      res)))\n\n(defn get-params-data [scene]\n  (->> (:params scene)\n       (tree-seq coll? identity)\n       (filter #(or (string? %) (keyword? %)))))\n\n(def ngram-tokenizers\n  [pliable/stringify-keyword\n   pliable/remove-diacritics\n   pliable/tokenize-words\n   (partial pliable/tokenize-ngrams 2 3)])\n\n(def prefix-tokenizers\n  [pliable/stringify-keyword\n   pliable/remove-diacritics\n   pliable/tokenize-words\n   (partial pliable/tokenize-edge-ngrams 2 10)])\n\n(defn index-scene [index scene]\n  (pliable/index-document\n   index\n   {:title {}\n    :title.ngram {:f :title\n                  :tokenizers ngram-tokenizers}\n    :title.prefix {:f :title\n                   :tokenizers prefix-tokenizers}\n    :docs {}\n    :docs.ngram {:f :docs\n                 :tokenizers ngram-tokenizers}\n    :tags {}\n    :collection {}\n    :params-data {:f get-params-data}}\n   (:id scene)\n   scene))\n\n(defn search [index q]\n  (pliable/query\n   index\n   {:operator :or\n    :queries\n    [{:q q\n      :operator :and\n      :boost 3}\n     {:q q\n      :operator :and\n      :tokenizers prefix-tokenizers\n      :fields #{:title.prefix}\n      :boost 2}\n     {:q q\n      :tokenizers ngram-tokenizers\n      :fields #{:title.ngram :docs.ngram}\n      :operator :or\n      :min-accuracy 0.5}]}))\n\n(defn create-index []\n  (let [index (atom {})]\n    (reify\n      index/Index\n      (index [_ doc]\n        (swap! index index-scene doc))\n\n      (query [_ q]\n        (search @index q)))))\n\n(defn prepare-result [state location result]\n  (let [doc (collection/by-id state (:id result))]\n    {:title (:title doc)\n     :illustration (collection/get-illustration doc state)\n     :actions [[:go-to-location (routes/get-location location doc)]]}))\n\n(defn prepare-search [state location]\n  (let [q (not-empty (:search/query state))]\n    {:icon (icons/icon :phosphor.regular/magnifying-glass)\n     :placeholder \"Search\"\n     :text (:search/query state)\n     :on-input (->> [[:assoc-in [:search/query] :event.target/value]\n                     [:search :event.target/value]]\n                    (remove nil?))\n     :action (when q\n               {:icon (icons/icon :phosphor.regular/x)\n                :actions [[:assoc-in [:search/query] \"\"]\n                          [:assoc-in [:search/suggestions] nil]]})\n     :suggestions (for [result (take 6 (:search/suggestions state))]\n                    (if (satisfies? index/SearchResult (:index state))\n                      (index/prepare-result (:index state) state location result)\n                      (prepare-result state location result)))}))\n"],"x_google_ignoreList":[0]}