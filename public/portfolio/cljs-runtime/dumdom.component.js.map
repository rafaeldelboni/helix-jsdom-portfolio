{"version":3,"sources":["dumdom/component.cljc"],"mappings":"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","names":["dumdom.component/*render-eagerly?*","dumdom.component/*render-comments?*","dumdom.component/eager-render-required?","cljs.core.atom","dumdom.component/should-component-update?","component-state","data","or__5045__auto__","cljs.core/contains?","cljs.core.not_EQ_","and__5043__auto__","cljs.core/deref","p__42321","map__42322","cljs.core/--destructure-map","cljs.core.get","dumdom.component/setup-animation-hooks","rendered","animation","will-enter","will-appear","cljs.core.swap_BANG_","cljs.core/assoc","G__42323","cljs.core.assoc","cljs.core/dissoc","p__42325","map__42326","dumdom.component/setup-mount-hook","on-mount","on-render","did-appear","did-enter","args","G__42327","cljs.core.update_in","insert-hook","vnode","cljs.core.apply","map__42328","temp__5804__auto__","callback","completion","cljs.core._EQ_","p__42332","map__42335","dumdom.component/setup-update-hook","on-update","old-data","G__42337","cljs.core/assoc-in","old-vnode","hook","dumdom.component/setup-unmount-hook","component","on-destroy","G__42361","destroy-hook","on-unmount","snabbdom-callback","did-leave","cljs.core/add-watch","k","r","o","n","cljs.core/remove-watch","dumdom.component/resolve-key","component-name","keyfn-key","kmap","G__42376","cljs.core/first","cljs.core.remove","cljs.core/empty?","clojure.string.join","dumdom.element/enumerate-key","var_args","G__42378","dumdom.component/component","js/Error","render","dumdom.component.component","opt","cljs.core/reset!","instances","cljs.core/not-empty","cljs.core/random-uuid","comp-fn","path","key","keyfn","lookup-key","fullpath","cljs.core.conj","instance","fexpr__42379","G__42380","vdom","G__42382","G__42383","fexpr__42381","dumdom.element/inflate-hiccup","cljs.core.update","s","G__42384","dumdom.component/single-child?","x","cljs.core/fn?","cljs.core/vector?","cljs.core/Keyword","dumdom.component/TransitionGroup","el-fn","children","cljs.core/List","cljs.core/seq","cljs.core/ifn?","fexpr__42385","dumdom.component/complete-transition","node","timeout","js/setTimeout","callback-fn","f","dumdom.component/transition-classes","transitionName","transition","cljs.core.keyword","k-active","p__42386","map__42387","dumdom.component/animate","enabled-by-default?","p__42388","map__42389","props","vec__42390","cljs.core.nth","init-class","active-class","dumdom.component/cleanup-animation","p__42393","map__42394","dumdom.component/TransitioningElement","p__42395","map__42396","child","dumdom.component/CSSTransitionGroup","p1__42397#","cljs.core.map","dumdom.component/component?"],"sourcesContent":["(ns dumdom.component\n  (:require [clojure.string :as str]\n            [dumdom.element :as e]))\n\n(def ^:dynamic *render-eagerly?*\n  \"When this var is set to `true`, every existing component will re-render on the\n  next call after a new component has been created, even if the input data has\n  not changed. This can be useful in development - if you have any level of\n  indirection in your rendering code (e.g. passing a component function as the\n  \\\"static arg\\\" to another component, multi-methods, etc), you are not\n  guaranteed to have all changed components re-render after a compile and hot\n  swap. With this var set to `true`, changing any code that defines a dumdom\n  component will cause all components to re-render.\"\n  false)\n\n(def ^:dynamic *render-comments?*\n  \"When this var is set to `true`, an HTML comment block containing the\n  component's name will be emitted for every named component. Useful\n  during development to get an overview of which component is responsible\n  for rendering a given fragment of the DOM.\"\n  false)\n\n(def eager-render-required? (atom false))\n\n(defn- should-component-update? [component-state data]\n  (or (not (contains? component-state :data))\n      (not= (:data component-state) data)\n      (and *render-eagerly?* @eager-render-required?)))\n\n(defn setup-animation-hooks [rendered animation {:keys [will-enter will-appear]}]\n  (when will-appear\n    (swap! animation assoc :will-appear will-appear))\n  (cond-> rendered\n    will-enter (assoc :willEnter #(swap! animation assoc :will-enter will-enter))\n    will-appear (assoc :willAppear #(swap! animation dissoc :will-appear))))\n\n(defn- setup-mount-hook [rendered {:keys [on-mount on-render will-appear did-appear will-enter did-enter]} data args animation]\n  (cond-> rendered\n    (or on-mount on-render will-enter will-appear)\n    (update-in\n     [:data :hook :insert]\n     (fn [insert-hook]\n       (fn [vnode]\n         (when insert-hook (insert-hook vnode))\n         (when on-mount (apply on-mount (.-elm vnode) data args))\n         (when on-render (apply on-render (.-elm vnode) data nil args))\n         (let [{:keys [will-enter will-appear]} @animation]\n           (when-let [callback (or will-enter will-appear)]\n             (swap! animation assoc :ready? false)\n             (apply callback\n                    (.-elm vnode)\n                    (fn []\n                      (swap! animation assoc :ready? true)\n                      (when-let [completion (if (= callback will-enter)\n                                              did-enter\n                                              did-appear)]\n                        (apply completion (.-elm vnode) data args)))\n                    data\n                    args))))))))\n\n(defn- setup-update-hook [rendered {:keys [on-update on-render]} data old-data args]\n  (cond-> rendered\n    (or on-update on-render)\n    (assoc-in\n     [:data :hook :update]\n     (fn hook [old-vnode vnode]\n       (when-not #?(:cljs (.-called hook)\n                    :clj true)\n         #?(:cljs (set! (.-called hook) true))\n         (when on-update (apply on-update (.-elm vnode) data old-data args))\n         (when on-render (apply on-render (.-elm vnode) data old-data args)))))))\n\n(defn- setup-unmount-hook [rendered component data args animation on-destroy]\n  (cond-> rendered\n    :always\n    (update-in\n     [:data :hook :destroy]\n     (fn [destroy-hook]\n       (fn [vnode]\n         (when-let [on-unmount (:on-unmount component)]\n           (apply on-unmount (.-elm vnode) data args))\n         (when destroy-hook\n           (destroy-hook vnode))\n         (on-destroy))))\n\n    (:will-leave component)\n    (assoc-in\n     [:data :hook :remove]\n     (fn [vnode snabbdom-callback]\n       (let [callback (fn []\n                        (when-let [did-leave (:did-leave component)]\n                          (apply did-leave (.-elm vnode) data args))\n                        (snabbdom-callback))]\n         (if (:ready? @animation)\n           (apply (:will-leave component) (.-elm vnode) callback data args)\n           (add-watch animation :leave\n             (fn [k r o n]\n               (when (:ready? n)\n                 (remove-watch animation :leave)\n                 (apply (:will-leave component) (.-elm vnode) callback data args))))))))))\n\n(defn resolve-key [rendered component-name keyfn-key kmap]\n  (let [k (->> [component-name\n                (str keyfn-key)\n                (some-> (:dumdom/component-key rendered) first)]\n               (remove empty?)\n               (str/join \".\")\n               (e/enumerate-key kmap))]\n    (assoc rendered\n           :dumdom/component-key k\n           :key (str/join \".\" k))))\n\n(defn component\n  \"Returns a component function that uses the provided function for rendering. The\n  resulting component will only call through to its rendering function when\n  called with data that is different from the data that produced the currently\n  rendered version of the component.\n\n  The rendering function can be called with any number of arguments, but only\n  the first one will influence rendering decisions. You should call the\n  component with a single immutable value, followed by any number of other\n  arguments, as desired. These additional constant arguments are suitable for\n  passing messaging channels, configuration maps, and other utilities that are\n  constant for the lifetime of the rendered element.\n\n  The optional opts argument is a map with additional properties:\n\n  :on-mount - A function invoked once, immediately after initial rendering. It\n  is passed the rendered DOM node, and all arguments passed to the render\n  function.\n\n  :on-update - A function invoked immediately after an updated is flushed to the\n  DOM, but not on the initial render. It is passed the underlying DOM node, the\n  value, and any constant arguments passed to the render function.\n\n  :on-render - A function invoked immediately after the DOM is updated, both on\n  the initial render and subsequent updates. It is passed the underlying DOM\n  node, the value, the old value, and any constant arguments passed to the\n  render function.\n\n  :on-unmount - A function invoked immediately before the component is unmounted\n  from the DOM. It is passed the underlying DOM node, the most recent value and\n  the most recent constant args passed to the render fn.\n\n  :will-appear - A function invoked when this component is added to a mounting\n  container component. Invoked at the same time as :on-mount. It is passed the\n  underlying DOM node, a callback function, the most recent value and the most\n  recent constant args passed to the render fn. The callback should be called to\n  indicate that the element is done \\\"appearing\\\".\n\n  :did-appear - A function invoked immediately after the callback passed\n  to :will-appear is called. It is passed the underlying DOM node, the most\n  recent value, and the most recent constant args passed to the render fn.\n\n  :will-enter - A function invoked when this component is added to an already\n  mounted container component. Invoked at the same time as :on.mount. It is\n  passed the underlying DOM node, a callback function, the value and any\n  constant args passed to the render fn. The callback function should be called\n  to indicate that the element is done entering.\n\n  :did-enter - A function invoked after the callback passed to :will-enter is\n  called. It is passed the underlying DOM node, the value and any constant args\n  passed to the render fn.\n\n  :will-leave - A function invoked when this component is removed from its\n  containing component. Is passed the underlying DOM node, a callback function,\n  the most recent value and the most recent constant args passed to the render\n  fn. The DOM node will not be removed until the callback is called.\n\n  :did-leave - A function invoked after the callback passed to :will-leave is\n  called (at the same time as :on-unmount). Is passed the underlying DOM node,\n  the most recent value and the most recent constant args passed to the render\n  fn.\"\n  ([render] (component render {}))\n  ([render opt]\n   (when *render-eagerly?*\n     (reset! eager-render-required? true))\n   (let [instances (atom {})\n         component-name (or (:name opt)\n                            #?(:cljs (not-empty (.-name render)))\n                            (str #?(:cljs (random-uuid)\n                                    :clj (java.util.UUID/randomUUID))))]\n     (fn [data & args]\n       (let [comp-fn\n             (fn [path kmap]\n               (let [key (when-let [keyfn (:keyfn opt)] (keyfn data))\n                     lookup-key (e/enumerate-key kmap key)\n                     fullpath (conj path lookup-key)\n                     instance (@instances fullpath)\n                     animation (atom {:ready? true})]\n                 (if (should-component-update? instance data)\n                   (let [rendered\n                         (some->\n                          (when-let [vdom (apply render data args)]\n                            ((e/inflate-hiccup vdom) fullpath {}))\n                          (resolve-key component-name key kmap)\n                          (assoc :dumdom/render-comments? *render-comments?*\n                                 :dumdom/lookup-key lookup-key)\n                          (update :dumdom/component-name\n                                  (fn [s]\n                                    (str component-name\n                                         (when s (str \"/\" s)))))\n                          #?(:cljs (setup-animation-hooks animation opt))\n                          #?(:cljs (setup-unmount-hook opt data args animation #(swap! instances dissoc fullpath))))]\n                     (swap! instances assoc fullpath {:vdom rendered :data data})\n                     ;; The insert and update hooks are added after the instance\n                     ;; is cached. When used from the cache, we never want\n                     ;; insert or update hooks to be called. Snabbdom will\n                     ;; occasionally call these even when there are no changes,\n                     ;; because it uses identity to determine if a vdom node\n                     ;; represents a change. Since dumdom always produces a new\n                     ;; JavaScript object, Snabbdom's check will have false\n                     ;; positives.\n                     #?(:cljs (cond-> rendered\n                                rendered\n                                (setup-mount-hook opt data args animation)\n\n                                ;; If the instance is nil, this is a new render,\n                                ;; and we don't want to trigger any updates\n                                ;; until it's been re-rendered with new data\n                                (and rendered instance)\n                                (setup-update-hook opt data (:data instance) args))\n                        :clj rendered))\n                   (:vdom instance))))]\n         #?(:cljs (set! (.-dumdom comp-fn) true))\n         comp-fn)))))\n\n(defn single-child? [x]\n  (or (fn? x) ;; component\n      (and (vector? x)\n           (keyword? (first x))) ;; hiccup\n      ))\n\n(defn TransitionGroup [el-fn opt children]\n  ;; Vectors with a function in the head position are interpreted as hiccup data\n  ;; - force children to be seqs to avoid them being parsed as hiccup.\n  (let [children (if (single-child? children)\n                   (list children)\n                   (seq children))]\n    (if (ifn? (:component opt))\n      ((:component opt) children)\n      (apply el-fn (or (:component opt) \"span\") opt children))))\n\n(defn- complete-transition [node timeout callback]\n  (if timeout\n    #?(:cljs (js/setTimeout callback timeout))\n    (let [callback-fn (atom nil)\n          f (fn []\n              (callback)\n              (.removeEventListener node \"transitionend\" @callback-fn))]\n      (reset! callback-fn f)\n      (.addEventListener node \"transitionend\" f))))\n\n(defn- transition-classes [transitionName transition]\n  (if (string? transitionName)\n    [(str transitionName \"-\" transition) (str transitionName \"-\" transition \"-active\")]\n    (let [k (keyword transition)\n          k-active (keyword (str transition \"Active\"))]\n      [(k transitionName) (get transitionName k-active (str (k transitionName) \"-active\"))])))\n\n(defn- animate [transition {:keys [enabled-by-default?]}]\n  (let [timeout (keyword (str \"transition\" transition \"Timeout\"))]\n    (fn [node callback {:keys [transitionName] :as props}]\n      (if (get props (keyword (str \"transition\" transition)) enabled-by-default?)\n        (let [[init-class active-class] (transition-classes transitionName (.toLowerCase transition))]\n          (.add (.-classList node) init-class)\n          (complete-transition node (get props timeout) callback)\n          #?(:cljs (js/setTimeout #(.add (.-classList node) active-class) 0)))\n        (callback)))))\n\n(defn- cleanup-animation [transition]\n  (fn [node {:keys [transitionName]}]\n    (.remove (.-classList node) (str transitionName \"-\" transition))\n    (.remove (.-classList node) (str transitionName \"-\" transition \"-active\"))))\n\n(def TransitioningElement\n  (component\n   (fn [{:keys [child]}]\n     child)\n   {:will-appear (animate \"Appear\" {:enabled-by-default? false})\n    :did-appear (cleanup-animation \"appear\")\n    :will-enter (animate \"Enter\" {:enabled-by-default? true})\n    :did-enter (cleanup-animation \"enter\")\n    :will-leave (animate \"Leave\" {:enabled-by-default? true})}))\n\n(defn CSSTransitionGroup [el-fn opt children]\n  (let [children (if (single-child? children)\n                   (list children)\n                   (seq children))]\n    (TransitionGroup el-fn opt (map #(TransitioningElement (assoc opt :child %)) children))))\n\n(defn component? [x]\n  (and x (.-dumdom x)))\n"],"x_google_ignoreList":[0]}