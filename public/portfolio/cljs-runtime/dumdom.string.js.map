{"version":3,"sources":["dumdom/string.cljc"],"mappings":"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","names":["dumdom.string/tag-name","node","dumdom.string/children","dumdom.string/attributes","cljs.core.merge","G__42461","G__42462","G__42463","cljs.core.map","p__42464","vec__42465","cljs.core.nth","k","v","cljs.core/name","cljs.core.into","G__42468","cljs.core.filter","cljs.core.comp","cljs.core/string?","cljs.core/second","p__42469","vec__42470","clojure.string/capitalize","dumdom.string/el-key","dumdom.string/style","dumdom.string/text-node?","vnode","dumdom.string/comment-node?","cljs.core._EQ_","dumdom.string/text","dumdom.string/kebab-case","s","clojure.string/lower-case","clojure.string/replace","dumdom.string/render-styles","styles","cljs.core.remove","cljs.core/nil?","p__42475","vec__42476","clojure.string.join","dumdom.string/escape","dumdom.string/attrs","attributes","G__42479","cljs.core.dissoc","cljs.core.assoc","cljs.core.pr_str","style","p__42480","vec__42481","dumdom.string/self-closing","dumdom.string/closing-tag","tag-name","dumdom.string/dom-str","attrs","cljs.core/contains?","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","dumdom.string/render","p__42512","vec__42513","seq42494","G__42495","cljs.core/first","cljs.core/next","self__5754__auto__","component","path","kmap","dumdom.element/inflate-hiccup","G__42516","G__42517","or__5045__auto__"],"sourcesContent":["(ns dumdom.string\n  (:require [clojure.string :as str]\n            [dumdom.element :as e]))\n\n(defn- tag-name [node]\n  (:sel node))\n\n(defn- children [node]\n  (:children node))\n\n(defn- attributes [node]\n  (merge (some-> node :data :attrs)\n         (some-> node :data :props)\n         (some->> node :data :dataset\n                  (map (fn [[k v]] [(str \"data-\" (name k)) v]))\n                  (into {}))\n         (some->> node :data :on\n                  (filter (comp string? second))\n                  (map (fn [[k v]]\n                         [(str \"on\" (str/capitalize k)) v]))\n                  (into {}))))\n\n(defn- el-key [node]\n  (:key node))\n\n(defn- style [node]\n  (-> node :data :style))\n\n(defn- text-node? [vnode]\n  (nil? (:sel vnode)))\n\n(defn- comment-node? [vnode]\n  (= \"!\" (tag-name vnode)))\n\n(defn- text [vnode]\n  (:text vnode))\n\n(defn- kebab-case [s]\n  (str/lower-case (str/replace s #\"([a-z])([A-Z])\" \"$1-$2\")))\n\n(defn- render-styles [styles]\n  (if (string? styles)\n    styles\n    (->> styles\n         (remove (comp nil? second))\n         (map (fn [[k v]] (str (kebab-case (name k)) \": \" v)))\n         (str/join \"; \"))))\n\n(defn- escape [s]\n  (-> s\n      (str/replace #\"&(?!([a-z]+|#\\d+);)\" \"&amp;\")\n      (str/replace #\"\\\"\" \"&quot;\")))\n\n(defn- attrs [vnode]\n  (let [k (el-key vnode)\n        attributes (cond-> (dissoc (attributes vnode) :innerHTML)\n                     k (assoc :data-dumdom-key (escape (pr-str k))))\n        style (style vnode)]\n    (->> (merge attributes\n                (when style\n                  {:style (render-styles style)}))\n         (map (fn [[k v]] (str \" \" (name k) \"=\\\"\" v \"\\\"\")))\n         (str/join \"\"))))\n\n(def ^:private self-closing\n  #{\"area\" \"base\" \"br\" \"col\" \"embed\" \"hr\" \"img\" \"input\"\n    \"link\" \"meta\" \"param\" \"source\" \"track\" \"wbr\"})\n\n(defn- closing-tag [tag-name]\n  (when-not (self-closing tag-name)\n    (str \"</\" tag-name \">\")))\n\n(defn- dom-str [vnode]\n  (cond\n    (or (nil? vnode)\n        (comment-node? vnode)) \"\"\n    (text-node? vnode) (text vnode)\n    :default (str \"<\" (tag-name vnode) (attrs vnode) \">\"\n                  (let [attrs (attributes vnode)]\n                    (if (contains? attrs :innerHTML)\n                      (:innerHTML attrs)\n                      (str/join \"\" (map dom-str (children vnode)))))\n                  (closing-tag (tag-name vnode)))))\n\n(defn render [component & [path kmap]]\n  (let [component (e/inflate-hiccup component)]\n    (dom-str (component (or path []) (or kmap {})))))\n"],"x_google_ignoreList":[0]}