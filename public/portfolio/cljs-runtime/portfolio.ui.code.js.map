{"version":3,"sources":["portfolio/ui/code.cljc"],"mappings":";AAKA,AAAA;AAAA;;;gCAAA,hCAAaW;;AAAb,IAAAX,sDAAA,WAEgBY;AAFhB,AAAA,IAAAX,kBAAA,EAAA,MAAA,OAAA,ZAEgBW,iBAAAA;IAFhBV,kBAAA,CAAAC,8BAAA,AAAAC,YAAAH;AAAA,AAAA,GAAA,GAAA,CAAAC,mBAAA;AAAA,QAAAA,gDAAAA,mDAAAA,LAEgBU,+BAAAA;;AAFhB,IAAAP,kBAAA,CAAAF,8BAAA;AAAA,AAAA,GAAA,GAAA,CAAAE,mBAAA;AAAA,QAAAA,gDAAAA,mDAAAA,LAEgBO,+BAAAA;;AAFhB,MAAA,AAAAN,2BAAA,0BAEgBM;;;;AAFhB,AAAA,gCAAA,hCAEGT,wEAAaS;AAFhB,AAAA,IAAAL,qBAAA,AAAAC,4CAAA,AAAAC,kBAAA,AAAA,HAEgBG;AAFhB,AAAA,GAAAL;AAAA,IAAAG,0BAAAH;AAAA,AAAA,QAAAG,wDAAAA,2DAAAA,LAEgBE,uCAAAA;;AAFhB,GAAA,EAAA,GAAA,MAAA,aAAA,GAAA,CAAA,uDAAA,7EAEgBA,sBAAAA;AAFhB,OAEgBA,oDAAAA;;AAFhB,OAAAZ,oDAEgBY;;;;;AAFhB,AAKG,AAAA,CAAAD,8BAAA,OAAA;;AAAA,CAAAR,8BAAA,OAEE,WAAcS;AAAd,AACEA;;AAEP,iCAAA,jCAAMC,0EAAQD;AAAd,AACE,0BAAA,jBAAI,MAAA,LAAMA,kBACN,EAAK,AAACE,sBAAMF,QAAG,AAACG,uBAAOH,UACvB,EAAK,OAASA,oBAAG,AAACG,uBAAOH;;AAE/B,6BAAA,7BAAMI,kEAAUC;AAAhB,AACE,GAAM,GAAK,AAACJ,+BAAOI;AAAnB,AACE,IAAAC,mBAAA,KAAAC;AAAA,AAAA,IAAAC,kDAAAC;IAAAC,6CAAAC;IAAAC,kDAAA;IAAAC,6CAAA,WAAAC;AAAA,AAAA,OAAAR,wBAAAQ;;AAAA,AAAA,CAAAL,sCAAAG;;AAAA,CAAAD,iCAAAE;;AAAA,IAAA,AACE,AAACE,iDACA,AAACC,sBAAczB,8BAAYc;UAF9B,AAAA,CAAAM,iCAAAD;;AAAA,CAAAD,sCAAAD;;AAAA,mDAAAF;;AADF","names":["portfolio$ui$code$ICodeString$format_code$dyn","x__5393__auto__","m__5394__auto__","portfolio.ui.code/format-code","goog/typeOf","m__5392__auto__","cljs.core/missing-protocol","temp__5802__auto__","cljs.core.get","cljs.core/meta","meta-impl__5395__auto__","portfolio.ui.code/ICodeString","x","portfolio.ui.code/blank?","cljs.core/coll?","cljs.core/empty?","portfolio.ui.code/code-str","data","sb__5690__auto__","goog.string/StringBuffer","*print-newline*-orig-val__44314","cljs.core/*print-newline*","*print-fn*-orig-val__44315","cljs.core/*print-fn*","*print-newline*-temp-val__44316","*print-fn*-temp-val__44317","x__5691__auto__","cljs.pprint.pprint","clojure.walk/postwalk"],"sourcesContent":["(ns portfolio.ui.code\n  (:require #?(:cljs [cljs.pprint :as pprint]\n               :clj [clojure.pprint :as pprint])\n            [clojure.walk :as walk]))\n\n(defprotocol ICodeString\n  :extend-via-metadata true\n  (format-code [x]))\n\n#?(:cljs\n   (extend-type default\n     ICodeString\n     (format-code [x]\n       x)))\n\n(defn blank? [x]\n  (or (nil? x)\n      (and (coll? x) (empty? x))\n      (and (string? x) (empty? x))))\n\n(defn code-str [data]\n  (when (not (blank? data))\n    (with-out-str\n      (pprint/pprint\n       (walk/postwalk format-code data)))))\n"],"x_google_ignoreList":[0]}