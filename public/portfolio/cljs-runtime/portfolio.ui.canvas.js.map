{"version":3,"sources":["portfolio/ui/canvas.cljs"],"mappings":"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","names":["portfolio.ui.components.canvas/CanvasView","portfolio.ui.canvas/view-impl","portfolio.ui.canvas/get-current-addon","location","addons","or__5045__auto__","temp__5804__auto__","id","G__45070","cljs.core.keyword","cljs.core/first","cljs.core.filter","cljs.core.comp","portfolio.ui.canvas/prepare-panel","state","scene","current-addon","minimize-path","content","portfolio.ui.canvas.protocols/prepare-panel-content","minimized?","cljs.core.get_in","cljs.core/not","iter__5523__auto__","s__45073","cljs.core/LazySeq","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__45075","cljs.core/chunk-buffer","i__45074","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__45072","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","addon","G__45076","G__45077","cljs.core._EQ_","cljs.core.assoc","cljs.core.not_EQ_","portfolio.ui.routes/get-addon-url","portfolio.ui.canvas/get-tool-defaults","tools","cljs.core.apply","cljs.core/merge","cljs.core.map","portfolio.ui.canvas.addons/get-default-value","portfolio.ui.canvas/toolbar-value?","tool","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","portfolio.ui.canvas.protocols/ICanvasToolValue","cljs.core/ifn?","cljs.core.get","cljs.core/meta","portfolio.ui.canvas/get-tool-values","p1__45087#","portfolio.ui.canvas.protocols/get-tool-value","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","portfolio.ui.canvas/prepare-error","p__45096","p__45097","map__45098","cljs.core/--destructure-map","vec__45099","cljs.core.nth","seq45094","G__45095","cljs.core/next","self__5754__auto__","exception","cause","data","p1__45092#","cljs.core.update","portfolio.ui.code/code-str","cljs.core.conj","cljs.core/ex-data","params","p__45102","map__45103","portfolio.ui.canvas/prepare-canvas","options","canvas","map__45104","f","component-params","error","G__45105","cljs.core.update_in","cljs.core/assoc-in","cljs.core.partial","portfolio.ui.canvas.prepare_error","portfolio.ui.canvas/toolbar-button?","portfolio.ui.canvas.protocols/ICanvasToolbarButtonData","portfolio.ui.canvas/dark?","background","portfolio.ui.color/rgb->hsl","portfolio.ui.color/->rgb","portfolio.ui.canvas/create-button-groups","buttons","grouped","cljs.core/group-by","cljs.core.into","res","temp__5802__auto__","map__45108","button-group","button","cljs.core.dissoc","portfolio.ui.components.canvas-toolbar-buttons/ButtonGroup","cljs.core/with-meta","p__45109","map__45110","portfolio.ui.canvas/specifically-sized?","width","height","portfolio.ui.canvas/prepare-pane","view","ctx","scenes","p1__45111#","cljs.core.keep","portfolio.ui.canvas.protocols/prepare-toolbar-button","G__45112","portfolio.ui.canvas/canvas-tool?","portfolio.ui.canvas.protocols/ICanvasTool","portfolio.ui.canvas/pane-prepper?","portfolio.ui.canvas.protocols/ICanvasToolPaneMiddleware","portfolio.ui.canvas/prepare-scenes","layout","s__45146","b__45151","i__45150","iter__45144","cljs.core.sort_by","portfolio.ui.scene/sort-key","G__45165","G__45166","portfolio.ui.scene/prep-scene-fn","portfolio.ui.routes/get-scene-url","portfolio.ui.canvas/prepare-layout-pane","cljs.core.reduce","portfolio.ui.canvas.protocols/prepare-pane","portfolio.ui.canvas/prepare-layout-xs","root-layout","source","path","opt","G__45168","fexpr__45167","n","s__45171","b__45173","i__45172","vec__45174","iter__45170","vec__45186","i","x","cljs.core/vector","cljs.core.range","G__45178","G__45179","G__45180","G__45181","G__45182","G__45183","G__45184","G__45185","G__45189","G__45190","G__45191","G__45192","G__45193","G__45194","G__45195","G__45196","cljs.core.merge","p__45197","map__45198","portfolio.ui.canvas/prepare-layout","portfolio.ui.routes/get-id","portfolio.ui.canvas/prepare-canvas-view","map__45199","portfolio.ui.layout/get-current-layout","kind","target","G__45200","and__5043__auto__","phosphor.icons/load-icon!","portfolio.ui.canvas/view-prepper?","portfolio.ui.canvas.protocols/ICanvasToolMiddleware","portfolio.ui.canvas/prepare-view","portfolio.ui.canvas.protocols/prepare-view","portfolio.ui.canvas/data-impl","portfolio.ui.canvas/describe-missing-tool-id","p__45202","map__45203","portfolio.ui.canvas/describe-problem","message","p__45205","map__45206","portfolio.ui.canvas/create-canvas","cljs.core.remove","cljs.core.concat","p1__45204#","cljs.core.mapcat","cljs.core/chunk-first"],"sourcesContent":["(ns portfolio.ui.canvas\n  (:require [phosphor.icons :as icons]\n            [portfolio.ui.canvas.addons :as addons]\n            [portfolio.ui.canvas.protocols :as canvas]\n            [portfolio.ui.code :as code]\n            [portfolio.ui.color :as color]\n            [portfolio.ui.components.canvas :refer [CanvasView]]\n            [portfolio.ui.components.canvas-toolbar-buttons :refer [ButtonGroup]]\n            [portfolio.ui.layout :as layout]\n            [portfolio.ui.routes :as routes]\n            [portfolio.ui.scene :as scene]\n            [portfolio.ui.view :as view]))\n\n(def view-impl\n  {`view/render-view #'CanvasView})\n\n(defn get-current-addon [location addons]\n  (or (when-let [id (some-> location :query-params :addon keyword)]\n        (first (filter (comp #{id} :id) addons)))\n      (first addons)))\n\n(defn prepare-panel [state location scene addons]\n  (let [current-addon (get-current-addon location addons)\n        minimize-path [:canvas/panel :minimized?]\n        content (canvas/prepare-panel-content current-addon state scene)\n        minimized? (get-in state minimize-path (not content))]\n    {:tabs (for [addon addons]\n             (cond-> addon\n               (= current-addon addon)\n               (assoc :selected? true)\n\n               (not= current-addon addon)\n               (assoc :url (routes/get-addon-url location addon))))\n     :minimized? minimized?\n     :button (if minimized?\n               {:text \"Maximize\"\n                :actions [[:dissoc-in minimize-path]]\n                :direction :up}\n               {:text \"Minimize\"\n                :direction :down\n                :actions [[:assoc-in minimize-path true]]})\n     :content content}))\n\n(defn get-tool-defaults [tools]\n  (apply merge (map addons/get-default-value tools)))\n\n(defn toolbar-value? [tool]\n  (or (satisfies? canvas/ICanvasToolValue tool)\n      (ifn? (get (meta tool) `canvas/get-tool-value))))\n\n(defn get-tool-values [state id tools]\n  (->> tools\n       (filter toolbar-value?)\n       (map #(canvas/get-tool-value % state id))\n       (apply merge)))\n\n(defn prepare-error [{:keys [exception cause data]} & [scene]]\n  {:message (or (.-message exception)\n                (when exception\n                  (str \"Exception was not an Error instance: \" exception)))\n   :data (-> (map #(update % :data code/code-str) data)\n             (conj (when-let [data (ex-data exception)]\n                     {:label \"ex-data\"\n                      :data (code/code-str data)}))\n             (conj (when-let [params (:component-params scene)]\n                     {:label \"Component params\"\n                      :data params})))\n   :stack (.-stack exception)\n   :title (or cause \"Failed to render component\")})\n\n(defn prepare-canvas [options {:keys [scene] :as canvas}]\n  (let [f (-> canvas :scene :component-fn)\n        {:keys [id component-params]} scene\n        error (get-in canvas [:scene component-params :runtime-error])\n        canvas (assoc canvas :opt options)]\n    (cond-> (update-in canvas [:scene :rendered-data :options] options)\n      (ifn? f) (assoc-in [:scene :component-fn] (partial f options))\n      (nil? error) (assoc-in [:scene :actions :report-render-error]\n                             [[:assoc-in\n                               [:scenes id component-params :runtime-error]\n                               {:exception :action/exception\n                                :info :action/info\n                                :cause :action/cause}]])\n      error (assoc-in [:scene :error] (prepare-error error scene)))))\n\n(defn toolbar-button? [tool]\n  (or (satisfies? canvas/ICanvasToolbarButtonData tool)\n      (ifn? (get (meta tool) `canvas/prepare-toolbar-button))))\n\n(defn dark? [background]\n  (when background\n    (< (:l (color/rgb->hsl (color/->rgb background))) 40)))\n\n(defn create-button-groups [buttons]\n  (loop [buttons buttons\n         grouped (->> buttons\n                      (filter :button-group)\n                      (group-by :button-group)\n                      (into {}))\n         res []]\n    (if-let [{:keys [button-group] :as button} (first buttons)]\n      (recur\n       (next buttons)\n       (dissoc grouped button-group)\n       (cond\n         (nil? button-group)\n         (conj res button)\n\n         (grouped button-group)\n         (conj res (with-meta\n                     {:buttons (grouped button-group)}\n                     {`canvas/render-toolbar-button #'ButtonGroup}))\n\n         :else res))\n      res)))\n\n(defn specifically-sized? [{:viewport/keys [width height]}]\n  (or (number? width) (number? height)))\n\n(defn prepare-pane [state view ctx]\n  (when-let [scenes (seq (:scenes ctx))]\n    (let [buttons (->> (:tools view)\n                       (filter toolbar-button?)\n                       (keep #(canvas/prepare-toolbar-button\n                               % state (dissoc ctx :scenes)))\n                       create-button-groups)\n          background (:background/background-color (:pane-options ctx))]\n      (cond-> {:kind :pane\n               :id (:pane-id ctx)\n               :canvases (map (partial prepare-canvas (:pane-options ctx)) scenes)\n               :class-name (if (dark? background)\n                             :dark\n                             :light)}\n        (seq buttons)\n        (assoc :toolbar {:buttons buttons})\n\n        (and (not (specifically-sized? (:pane-options ctx)))\n             (not (:gallery? (:layout ctx))))\n        (assoc :background background)))))\n\n(defn canvas-tool? [tool]\n  (or (satisfies? canvas/ICanvasTool tool)\n      (and (ifn? (get (meta tool) `canvas/prepare-canvas))\n           (ifn? (get (meta tool) `canvas/finalize-canvas)))))\n\n(defn pane-prepper? [tool]\n  (or (satisfies? canvas/ICanvasToolPaneMiddleware tool)\n      (ifn? (get (meta tool) `canvas/prepare-pane))))\n\n(defn prepare-scenes [state location view layout scenes]\n  (for [scene (sort-by scene/sort-key scenes)]\n    (let [tools (filter canvas-tool? (:tools view))]\n      (cond->\n          {:scene (scene/prep-scene-fn state scene)}\n        (seq (:css-paths state))\n        (assoc :css-paths (:css-paths state))\n\n        (:canvas-path state)\n        (assoc :canvas-path (:canvas-path state))\n\n        (seq tools)\n        (assoc :tools tools)\n\n        (:docs scene)\n        (assoc :title (:title scene)\n               :description (:docs scene))\n\n        (:code scene)\n        (assoc :code (:code scene))\n\n        (:gallery? layout)\n        (assoc :title (:title scene)\n               :url (routes/get-scene-url location scene))))))\n\n(defn prepare-layout-pane [state view ctx]\n  (let [f (->> (:tools view)\n               (filter pane-prepper?)\n               (reduce (fn [f tool]\n                         (partial canvas/prepare-pane tool f))\n                       prepare-pane))]\n    (f state view ctx)))\n\n(defn prepare-layout-xs [state location root-layout source view scenes path opt]\n  (if (#{:rows :cols} (:kind opt))\n    {:kind (:kind opt)\n     :xs (let [n (count (:xs opt))]\n           (for [[i x] (map vector (range) (:xs opt))]\n             (-> (prepare-layout-xs state location root-layout source view scenes (conj path i) x)\n                 (assoc (if (= :rows (:kind opt))\n                          :height\n                          :width)\n                        (str \"calc(100% / \" n \")\"))\n                 (assoc :offset (str \"calc((100% / \" n \") * \" i \")\"))\n                 ;; Using calc instead of calculating the value here means the\n                 ;; size won't be forcibly set unless the layout is different.\n                 ;; This allows us to have transient pane resize that isn't\n                 ;; represented in the store. Ideally we'll have the size in the\n                 ;; store eventually, but this gives us a nice POC for now.\n                 (assoc :handle (when (< i (dec n))\n                                  {:kind (if (= :rows (:kind opt))\n                                           :horizontal\n                                           :vertical)})))))}\n    (->> {:pane-id (::layout/pane-id opt)\n          :pane-options (merge (get-tool-defaults (:tools view))\n                               opt\n                               (get-tool-values state (::layout/pane-id opt) (:tools view)))\n          :pane-path path\n          :layout-path [:layout source]\n          :layout root-layout\n          :config-source source\n          :scenes scenes}\n         (prepare-layout-pane state view))))\n\n(defn prepare-layout [state location view {:keys [layout source]} scenes]\n  (let [scenes (prepare-scenes state location view layout scenes)]\n    (-> (prepare-layout-xs state location layout source view scenes [] layout)\n        (assoc :id (if (:gallery? layout)\n                     (routes/get-id location)\n                     :single-scene)\n               :height \"100%\"))))\n\n(defn prepare-canvas-view [state location view]\n  (let [layout (layout/get-current-layout state)\n        {:keys [scenes kind target]} (:current-selection state)]\n    (with-meta\n      (cond-> (if-let [error (first (:problems view))]\n                {:hud {:error error}}\n                (assoc (prepare-layout state location view layout scenes)\n                       :panel (when (and (= 1 (count scenes)) (seq (:addons view)))\n                                (prepare-panel state location (first scenes) (:addons view)))))\n        (and (:docs target) (= :collection kind))\n        (assoc\n         :title (:title target)\n         :description (:docs target))\n\n        (:error state)\n        (assoc :hud\n               {:action {:actions [[:dissoc-in [:error]]]\n                         :icon (icons/icon :phosphor.bold/x)}\n                :error (prepare-error (:error state))}))\n      view-impl)))\n\n(defn view-prepper? [tool]\n  (or (satisfies? canvas/ICanvasToolMiddleware tool)\n      (ifn? (get (meta tool) `canvas/prepare-view))))\n\n(defn prepare-view [view state location]\n  (let [f (->> (:tools view)\n               (filter view-prepper?)\n               (reduce (fn [f tool]\n                         (partial canvas/prepare-view tool f state location view))\n                       prepare-canvas-view))]\n    (f state location view)))\n\n(def data-impl\n  {`view/prepare-data #'prepare-view})\n\n(defn describe-missing-tool-id [tool]\n  {:title \"Badly configured canvas tool\"\n   :message [:span \"Canvas tool extensions must have an \" [:code \":id\"] \" or they won't work correctly. Please inspect this tool.\"]\n   :data [{:label \"Configuration\"\n           :data (code/code-str tool)}]})\n\n(defn describe-problem [tool {:keys [data message]}]\n  {:title \"Badly configured canvas tool\"\n   :message [:span message \" \" [:code (code/code-str data)]]\n   :data [{:label \"Configuration\"\n           :data (code/code-str (dissoc tool :problems))}]})\n\n(defn create-canvas [{:keys [tools addons layout]}]\n  (-> {:id ::canvas\n       :title \"Canvas\"\n       :tools (->> (filter :id tools)\n                   (remove :problems))\n       :addons addons\n       :layout (or layout {})\n       :problems (->> (remove :problems tools)\n                      (remove :id)\n                      (map describe-missing-tool-id)\n                      (concat (mapcat #(map (partial describe-problem %) (:problems %)) tools))\n                      seq)}\n      (with-meta data-impl)))\n"],"x_google_ignoreList":[0]}